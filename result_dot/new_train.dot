digraph G{
rankdir="LR";
"MODULE"[shape="box",fillcolor="white",style=filled];
"import argparse,type='import_statement'\nline_star:0,line_end:0|char_star:0,char_end:15"[shape="box",fillcolor="#f48b29",style=filled];
"MODULE"->"import argparse,type='import_statement'\nline_star:0,line_end:0|char_star:0,char_end:15";
"import torch.distributed as dist,type='import_statement'\nline_star:2,line_end:2|char_star:0,char_end:32"[shape="box",fillcolor="#f48b29",style=filled];
"MODULE"->"import torch.distributed as dist,type='import_statement'\nline_star:2,line_end:2|char_star:0,char_end:32";
"import torch.nn.functional as F,type='import_statement'\nline_star:3,line_end:3|char_star:0,char_end:31"[shape="box",fillcolor="#f48b29",style=filled];
"MODULE"->"import torch.nn.functional as F,type='import_statement'\nline_star:3,line_end:3|char_star:0,char_end:31";
"import torch.optim as optim,type='import_statement'\nline_star:4,line_end:4|char_star:0,char_end:27"[shape="box",fillcolor="#f48b29",style=filled];
"MODULE"->"import torch.optim as optim,type='import_statement'\nline_star:4,line_end:4|char_star:0,char_end:27";
"import torch.optim.lr_scheduler as lr_scheduler,type='import_statement'\nline_star:5,line_end:5|char_star:0,char_end:47"[shape="box",fillcolor="#f48b29",style=filled];
"MODULE"->"import torch.optim.lr_scheduler as lr_scheduler,type='import_statement'\nline_star:5,line_end:5|char_star:0,char_end:47";
"import yaml,type='import_statement'\nline_star:6,line_end:6|char_star:0,char_end:11"[shape="box",fillcolor="#f48b29",style=filled];
"MODULE"->"import yaml,type='import_statement'\nline_star:6,line_end:6|char_star:0,char_end:11";
"from torch.utils.tensorboard import SummaryWriter,type='import_from_statement'\nline_star:7,line_end:7|char_star:0,char_end:49"[shape="box",fillcolor="#f48b29",style=filled];
"MODULE"->"from torch.utils.tensorboard import SummaryWriter,type='import_from_statement'\nline_star:7,line_end:7|char_star:0,char_end:49";
"import test,type='import_statement'\nline_star:9,line_end:9|char_star:0,char_end:11"[shape="box",fillcolor="#f48b29",style=filled];
"MODULE"->"import test,type='import_statement'\nline_star:9,line_end:9|char_star:0,char_end:11";
"# import test.py to get mAP after each epoch,type='comment'\nline_star:9,line_end:9|char_star:13,char_end:57"[shape="box",fillcolor="#f0c929",style=filled];
"MODULE"->"# import test.py to get mAP after each epoch,type='comment'\nline_star:9,line_end:9|char_star:13,char_end:57";
"from models.yolo import Model,type='import_from_statement'\nline_star:10,line_end:10|char_star:0,char_end:29"[shape="box",fillcolor="#f48b29",style=filled];
"MODULE"->"from models.yolo import Model,type='import_from_statement'\nline_star:10,line_end:10|char_star:0,char_end:29";
"from utils.datasets import *,type='import_from_statement'\nline_star:11,line_end:11|char_star:0,char_end:28"[shape="box",fillcolor="#f48b29",style=filled];
"MODULE"->"from utils.datasets import *,type='import_from_statement'\nline_star:11,line_end:11|char_star:0,char_end:28";
"from utils.utils import *,type='import_from_statement'\nline_star:12,line_end:12|char_star:0,char_end:25"[shape="box",fillcolor="#f48b29",style=filled];
"MODULE"->"from utils.utils import *,type='import_from_statement'\nline_star:12,line_end:12|char_star:0,char_end:25";
"try:  # Mixed precision training https://github.com/NVIDIA/apex\n    from apex import amp\nexcept:\n    print('Apex recommended for faster mixed precision training: https://github.com/NVIDIA/apex')\n    mixed_precision = False,type='try_statement'\nline_star:15,line_end:19|char_star:0,char_end:27"[shape="box",fillcolor="white",style=filled];
"MODULE"->"try:  # Mixed precision training https://github.com/NVIDIA/apex\n    from apex import amp\nexcept:\n    print('Apex recommended for faster mixed precision training: https://github.com/NVIDIA/apex')\n    mixed_precision = False,type='try_statement'\nline_star:15,line_end:19|char_star:0,char_end:27";
"try,type='try'\nline_star:15,line_end:15|char_star:0,char_end:3"[shape="box",fillcolor="white",style=filled];
"try:  # Mixed precision training https://github.com/NVIDIA/apex\n    from apex import amp\nexcept:\n    print('Apex recommended for faster mixed precision training: https://github.com/NVIDIA/apex')\n    mixed_precision = False,type='try_statement'\nline_star:15,line_end:19|char_star:0,char_end:27"->"try,type='try'\nline_star:15,line_end:15|char_star:0,char_end:3";
"# Mixed precision training https://github.com/NVIDIA/apex,type='comment'\nline_star:15,line_end:15|char_star:6,char_end:63"[shape="box",fillcolor="#f0c929",style=filled];
"try:  # Mixed precision training https://github.com/NVIDIA/apex\n    from apex import amp\nexcept:\n    print('Apex recommended for faster mixed precision training: https://github.com/NVIDIA/apex')\n    mixed_precision = False,type='try_statement'\nline_star:15,line_end:19|char_star:0,char_end:27"->"# Mixed precision training https://github.com/NVIDIA/apex,type='comment'\nline_star:15,line_end:15|char_star:6,char_end:63";
"type='INFORMATION BLOCK'\nline_star:16,line_end:16|char_star:4,char_end:24"[shape="point",fillcolor="#121013",style=filled];
"try:  # Mixed precision training https://github.com/NVIDIA/apex\n    from apex import amp\nexcept:\n    print('Apex recommended for faster mixed precision training: https://github.com/NVIDIA/apex')\n    mixed_precision = False,type='try_statement'\nline_star:15,line_end:19|char_star:0,char_end:27"->"type='INFORMATION BLOCK'\nline_star:16,line_end:16|char_star:4,char_end:24";
"from apex import amp,type='import_from_statement'\nline_star:16,line_end:16|char_star:4,char_end:24"[shape="box",fillcolor="#f48b29",style=filled];
"type='INFORMATION BLOCK'\nline_star:16,line_end:16|char_star:4,char_end:24"->"from apex import amp,type='import_from_statement'\nline_star:16,line_end:16|char_star:4,char_end:24";
"except:\n    print('Apex recommended for faster mixed precision training: https://github.com/NVIDIA/apex')\n    mixed_precision = False,type='except_clause'\nline_star:17,line_end:19|char_star:0,char_end:27"[shape="box",fillcolor="white",style=filled];
"try:  # Mixed precision training https://github.com/NVIDIA/apex\n    from apex import amp\nexcept:\n    print('Apex recommended for faster mixed precision training: https://github.com/NVIDIA/apex')\n    mixed_precision = False,type='try_statement'\nline_star:15,line_end:19|char_star:0,char_end:27"->"except:\n    print('Apex recommended for faster mixed precision training: https://github.com/NVIDIA/apex')\n    mixed_precision = False,type='except_clause'\nline_star:17,line_end:19|char_star:0,char_end:27";
"except,type='except'\nline_star:17,line_end:17|char_star:0,char_end:6"[shape="box",fillcolor="white",style=filled];
"except:\n    print('Apex recommended for faster mixed precision training: https://github.com/NVIDIA/apex')\n    mixed_precision = False,type='except_clause'\nline_star:17,line_end:19|char_star:0,char_end:27"->"except,type='except'\nline_star:17,line_end:17|char_star:0,char_end:6";
"type='INFORMATION BLOCK'\nline_star:18,line_end:19|char_star:4,char_end:27"[shape="point",fillcolor="#121013",style=filled];
"except:\n    print('Apex recommended for faster mixed precision training: https://github.com/NVIDIA/apex')\n    mixed_precision = False,type='except_clause'\nline_star:17,line_end:19|char_star:0,char_end:27"->"type='INFORMATION BLOCK'\nline_star:18,line_end:19|char_star:4,char_end:27";
"# not installed,type='comment'\nline_star:19,line_end:19|char_star:29,char_end:44"[shape="box",fillcolor="#f0c929",style=filled];
"MODULE"->"# not installed,type='comment'\nline_star:19,line_end:19|char_star:29,char_end:44";
"# weights dir,type='comment'\nline_star:21,line_end:21|char_star:27,char_end:40"[shape="box",fillcolor="#f0c929",style=filled];
"MODULE"->"# weights dir,type='comment'\nline_star:21,line_end:21|char_star:27,char_end:40";
"# Hyperparameters,type='comment'\nline_star:26,line_end:26|char_star:0,char_end:17"[shape="box",fillcolor="#f0c929",style=filled];
"MODULE"->"# Hyperparameters,type='comment'\nline_star:26,line_end:26|char_star:0,char_end:17";
"# image shear (+/- deg),type='comment'\nline_star:44,line_end:44|char_star:22,char_end:45"[shape="box",fillcolor="#f0c929",style=filled];
"MODULE"->"# image shear (+/- deg),type='comment'\nline_star:44,line_end:44|char_star:22,char_end:45";
"# Overwrite hyp with hyp*.txt (optional),type='comment'\nline_star:47,line_end:47|char_star:0,char_end:40"[shape="box",fillcolor="#f0c929",style=filled];
"MODULE"->"# Overwrite hyp with hyp*.txt (optional),type='comment'\nline_star:47,line_end:47|char_star:0,char_end:40";
"if f:\n    print('Using %s' % f[0])\n    for k, v in zip(hyp.keys(), np.loadtxt(f[0])):\n        hyp[k] = v,type='if_statement'\nline_star:49,line_end:52|char_star:0,char_end:18"[shape="box",fillcolor="#9ecca4",style=filled];
"MODULE"->"if f:\n    print('Using %s' % f[0])\n    for k, v in zip(hyp.keys(), np.loadtxt(f[0])):\n        hyp[k] = v,type='if_statement'\nline_star:49,line_end:52|char_star:0,char_end:18";
"# Print focal loss if gamma > 0,type='comment'\nline_star:54,line_end:54|char_star:0,char_end:31"[shape="box",fillcolor="#f0c929",style=filled];
"MODULE"->"# Print focal loss if gamma > 0,type='comment'\nline_star:54,line_end:54|char_star:0,char_end:31";
"if hyp['fl_gamma']:\n    print('Using FocalLoss(gamma=%g)' % hyp['fl_gamma']),type='if_statement'\nline_star:55,line_end:56|char_star:0,char_end:56"[shape="box",fillcolor="#9ecca4",style=filled];
"MODULE"->"if hyp['fl_gamma']:\n    print('Using FocalLoss(gamma=%g)' % hyp['fl_gamma']),type='if_statement'\nline_star:55,line_end:56|char_star:0,char_end:56";
"def train(hyp):\n    epochs = opt.epochs  # 300\n    batch_size = opt.batch_size  # 64\n    weights = opt.weights  # initial training weights\n\n    # Configure\n    init_seeds(1)\n    with open(opt.data) as f:\n        data_dict = yaml.load(f, Loader=yaml.FullLoader)  # model dict\n    train_path = data_dict['train']\n    test_path = data_dict['val']\n    nc = 1 if opt.single_cls else int(data_dict['nc'])  # number of classes\n\n    # Remove previous results\n    for f in glob.glob('*_batch*.jpg') + glob.glob(results_file):\n        os.remove(f)\n\n    # Create model\n    model = Model(opt.cfg).to(device)\n    assert model.md['nc'] == nc, '%s nc=%g classes but %s nc=%g classes' % (opt.data, nc, opt.cfg, model.md['nc'])\n\n    # Image sizes\n    gs = int(max(model.stride))  # grid size (max stride)\n    if any(x % gs != 0 for x in opt.img_size):\n        print('WARNING: --img-size %g,%g must be multiple of %s max stride %g' % (*opt.img_size, opt.cfg, gs))\n    imgsz, imgsz_test = [make_divisible(x, gs) for x in opt.img_size]  # image sizes (train, test)\n\n    # Optimizer\n    nbs = 64  # nominal batch size\n    accumulate = max(round(nbs / batch_size), 1)  # accumulate loss before optimizing\n    hyp['weight_decay'] *= batch_size * accumulate / nbs  # scale weight_decay\n    pg0, pg1, pg2 = [], [], []  # optimizer parameter groups\n    for k, v in model.named_parameters():\n        if v.requires_grad:\n            if '.bias' in k:\n                pg2.append(v)  # biases\n            elif '.weight' in k and '.bn' not in k:\n                pg1.append(v)  # apply weight decay\n            else:\n                pg0.append(v)  # all else\n\n    optimizer = optim.Adam(pg0, lr=hyp['lr0']) if opt.adam else \\n        optim.SGD(pg0, lr=hyp['lr0'], momentum=hyp['momentum'], nesterov=True)\n    optimizer.add_param_group({'params': pg1, 'weight_decay': hyp['weight_decay']})  # add pg1 with weight_decay\n    optimizer.add_param_group({'params': pg2})  # add pg2 (biases)\n    print('Optimizer groups: %g .bias, %g conv.weight, %g other' % (len(pg2), len(pg1), len(pg0)))\n    del pg0, pg1, pg2\n\n    # Load Model\n    google_utils.attempt_download(weights)\n    start_epoch, best_fitness = 0, 0.0\n    if weights.endswith('.pt'):  # pytorch format\n        ckpt = torch.load(weights, map_location=device)  # load checkpoint\n\n        # load model\n        try:\n            ckpt['model'] = \\n                {k: v for k, v in ckpt['model'].state_dict().items() if model.state_dict()[k].numel() == v.numel()}\n            model.load_state_dict(ckpt['model'], strict=False)\n        except KeyError as e:\n            s = '%s is not compatible with %s. Specify --weights '' or specify a --cfg compatible with %s.' \\n                % (opt.weights, opt.cfg, opt.weights)\n            raise KeyError(s) from e\n\n        # load optimizer\n        if ckpt['optimizer'] is not None:\n            optimizer.load_state_dict(ckpt['optimizer'])\n            best_fitness = ckpt['best_fitness']\n\n        # load results\n        if ckpt.get('training_results') is not None:\n            with open(results_file, 'w') as file:\n                file.write(ckpt['training_results'])  # write results.txt\n\n        start_epoch = ckpt['epoch'] + 1\n        del ckpt\n\n    # Mixed precision training https://github.com/NVIDIA/apex\n    if mixed_precision:\n        model, optimizer = amp.initialize(model, optimizer, opt_level='O1', verbosity=0)\n\n    # Scheduler https://arxiv.org/pdf/1812.01187.pdf\n    lf = lambda x: (((1 + math.cos(x * math.pi / epochs)) / 2) ** 1.0) * 0.9 + 0.1  # cosine\n    scheduler = lr_scheduler.LambdaLR(optimizer, lr_lambda=lf)\n    scheduler.last_epoch = start_epoch - 1  # do not move\n    # https://discuss.pytorch.org/t/a-problem-occured-when-resuming-an-optimizer/28822\n    # plot_lr_scheduler(optimizer, scheduler, epochs)\n\n    # Initialize distributed training\n    if device.type != 'cpu' and torch.cuda.device_count() > 1 and torch.distributed.is_available():\n        dist.init_process_group(backend='nccl',  # distributed backend\n                                init_method='tcp://127.0.0.1:9999',  # init method\n                                world_size=1,  # number of nodes\n                                rank=0)  # node rank\n        model = torch.nn.parallel.DistributedDataParallel(model)\n\n    # Dataset\n    dataset = LoadImagesAndLabels(train_path, imgsz, batch_size,\n                                  augment=True,\n                                  hyp=hyp,  # augmentation hyperparameters\n                                  rect=opt.rect,  # rectangular training\n                                  cache_images=opt.cache_images,\n                                  single_cls=opt.single_cls)\n    mlc = np.concatenate(dataset.labels, 0)[:, 0].max()  # max label class\n    assert mlc < nc, 'Label class %g exceeds nc=%g in %s. Correct your labels or your model.' % (mlc, nc, opt.cfg)\n\n    # Dataloader\n    batch_size = min(batch_size, len(dataset))\n    nw = min([os.cpu_count(), batch_size if batch_size > 1 else 0, 8])  # number of workers\n    dataloader = torch.utils.data.DataLoader(dataset,\n                                             batch_size=batch_size,\n                                             num_workers=nw,\n                                             shuffle=not opt.rect,  # Shuffle=True unless rectangular training is used\n                                             pin_memory=True,\n                                             collate_fn=dataset.collate_fn)\n\n    # Testloader\n    testloader = torch.utils.data.DataLoader(LoadImagesAndLabels(test_path, imgsz_test, batch_size,\n                                                                 hyp=hyp,\n                                                                 rect=True,\n                                                                 cache_images=opt.cache_images,\n                                                                 single_cls=opt.single_cls),\n                                             batch_size=batch_size,\n                                             num_workers=nw,\n                                             pin_memory=True,\n                                             collate_fn=dataset.collate_fn)\n\n    # Model parameters\n    hyp['cls'] *= nc / 80.  # scale coco-tuned hyp['cls'] to current dataset\n    model.nc = nc  # attach number of classes to model\n    model.hyp = hyp  # attach hyperparameters to model\n    model.gr = 1.0  # giou loss ratio (obj_loss = 1.0 or giou)\n    model.class_weights = labels_to_class_weights(dataset.labels, nc).to(device)  # attach class weights\n    model.names = data_dict['names']\n\n    # class frequency\n    labels = np.concatenate(dataset.labels, 0)\n    c = torch.tensor(labels[:, 0])  # classes\n    # cf = torch.bincount(c.long(), minlength=nc) + 1.\n    # model._initialize_biases(cf.to(device))\n    # plot_labels(labels)  #<----------------------------close by xujing\n    tb_writer.add_histogram('classes', c, 0)\n\n    # Exponential moving average\n    ema = torch_utils.ModelEMA(model)\n\n    # Start training\n    t0 = time.time()\n    nb = len(dataloader)  # number of batches\n    n_burn = max(3 * nb, 1e3)  # burn-in iterations, max(3 epochs, 1k iterations)\n    maps = np.zeros(nc)  # mAP per class\n    results = (0, 0, 0, 0, 0, 0, 0)  # 'P', 'R', 'mAP', 'F1', 'val GIoU', 'val Objectness', 'val Classification'\n    print('Image sizes %g train, %g test' % (imgsz, imgsz_test))\n    print('Using %g dataloader workers' % nw)\n    print('Starting training for %g epochs...' % epochs)\n    # torch.autograd.set_detect_anomaly(True)\n    for epoch in range(start_epoch, epochs):  # epoch ------------------------------------------------------------------\n        model.train()\n\n        # Update image weights (optional)\n        if dataset.image_weights:\n            w = model.class_weights.cpu().numpy() * (1 - maps) ** 2  # class weights\n            image_weights = labels_to_image_weights(dataset.labels, nc=nc, class_weights=w)\n            dataset.indices = random.choices(range(dataset.n), weights=image_weights, k=dataset.n)  # rand weighted idx\n\n        mloss = torch.zeros(4, device=device)  # mean losses\n        print(('\n' + '%10s' * 8) % ('Epoch', 'gpu_mem', 'GIoU', 'obj', 'cls', 'total', 'targets', 'img_size'))\n        pbar = tqdm(enumerate(dataloader), total=nb)  # progress bar\n        for i, (imgs, targets, paths, _) in pbar:  # batch -------------------------------------------------------------\n            ni = i + nb * epoch  # number integrated batches (since train start)\n            imgs = imgs.to(device).float() / 255.0  # uint8 to float32, 0 - 255 to 0.0 - 1.0\n\n            # Burn-in\n            if ni <= n_burn:\n                xi = [0, n_burn]  # x interp\n                # model.gr = np.interp(ni, xi, [0.0, 1.0])  # giou loss ratio (obj_loss = 1.0 or giou)\n                accumulate = max(1, np.interp(ni, xi, [1, nbs / batch_size]).round())\n                for j, x in enumerate(optimizer.param_groups):\n                    # bias lr falls from 0.1 to lr0, all other lrs rise from 0.0 to lr0\n                    x['lr'] = np.interp(ni, xi, [0.1 if j == 2 else 0.0, x['initial_lr'] * lf(epoch)])\n                    if 'momentum' in x:\n                        x['momentum'] = np.interp(ni, xi, [0.9, hyp['momentum']])\n\n            # Multi-scale\n            if opt.multi_scale:\n                sz = random.randrange(imgsz * 0.5, imgsz * 1.5 + gs) // gs * gs  # size\n                sf = sz / max(imgs.shape[2:])  # scale factor\n                if sf != 1:\n                    ns = [math.ceil(x * sf / gs) * gs for x in imgs.shape[2:]]  # new shape (stretched to gs-multiple)\n                    imgs = F.interpolate(imgs, size=ns, mode='bilinear', align_corners=False)\n\n            # Forward\n            pred = model(imgs)\n\n            # Loss\n            loss, loss_items = compute_loss(pred, targets.to(device), model)\n            if not torch.isfinite(loss):\n                print('WARNING: non-finite loss, ending training ', loss_items)\n                return results\n\n            # Backward\n            if mixed_precision:\n                with amp.scale_loss(loss, optimizer) as scaled_loss:\n                    scaled_loss.backward()\n            else:\n                loss.backward()\n\n            # Optimize\n            if ni % accumulate == 0:\n                optimizer.step()\n                optimizer.zero_grad()\n                ema.update(model)\n\n            # Print\n            mloss = (mloss * i + loss_items) / (i + 1)  # update mean losses\n            mem = '%.3gG' % (torch.cuda.memory_cached() / 1E9 if torch.cuda.is_available() else 0)  # (GB)\n            s = ('%10s' * 2 + '%10.4g' * 6) % (\n                '%g/%g' % (epoch, epochs - 1), mem, *mloss, targets.shape[0], imgs.shape[-1])\n            pbar.set_description(s)\n\n            # Plot\n            if ni < 3:\n                f = 'train_batch%g.jpg' % i  # filename\n                res = plot_images(images=imgs, targets=targets, paths=paths, fname=f)\n                if tb_writer:\n                    tb_writer.add_image(f, res, dataformats='HWC', global_step=epoch)\n                    # tb_writer.add_graph(model, imgs)  # add model to tensorboard\n\n            # end batch ------------------------------------------------------------------------------------------------\n\n        # Scheduler\n        scheduler.step()\n\n        # mAP\n        ema.update_attr(model)\n        final_epoch = epoch + 1 == epochs\n        if not opt.notest or final_epoch:  # Calculate mAP\n            results, maps, times = test.test(opt.data,\n                                             batch_size=batch_size,\n                                             imgsz=imgsz_test,\n                                             save_json=final_epoch and opt.data.endswith(os.sep + 'coco.yaml'),\n                                             model=ema.ema,\n                                             single_cls=opt.single_cls,\n                                             dataloader=testloader,\n                                             fast=ni < n_burn)\n\n        # Write\n        with open(results_file, 'a') as f:\n            f.write(s + '%10.4g' * 7 % results + '\n')  # P, R, mAP, F1, test_losses=(GIoU, obj, cls)\n        if len(opt.name) and opt.bucket:\n            os.system('gsutil cp results.txt gs://%s/results/results%s.txt' % (opt.bucket, opt.name))\n\n        # Tensorboard\n        if tb_writer:\n            tags = ['train/giou_loss', 'train/obj_loss', 'train/cls_loss',\n                    'metrics/precision', 'metrics/recall', 'metrics/mAP_0.5', 'metrics/F1',\n                    'val/giou_loss', 'val/obj_loss', 'val/cls_loss']\n            for x, tag in zip(list(mloss[:-1]) + list(results), tags):\n                tb_writer.add_scalar(tag, x, epoch)\n\n        # Update best mAP\n        fi = fitness(np.array(results).reshape(1, -1))  # fitness_i = weighted combination of [P, R, mAP, F1]\n        if fi > best_fitness:\n            best_fitness = fi\n\n        # Save model\n        save = (not opt.nosave) or (final_epoch and not opt.evolve)\n        if save:\n            with open(results_file, 'r') as f:  # create checkpoint\n                ckpt = {'epoch': epoch,\n                        'best_fitness': best_fitness,\n                        'training_results': f.read(),\n                        'model': ema.ema.module if hasattr(model, 'module') else ema.ema,\n                        'optimizer': None if final_epoch else optimizer.state_dict()}\n\n            # Save last, best and delete\n            torch.save(ckpt, last)\n            if (best_fitness == fi) and not final_epoch:\n                torch.save(ckpt, best)\n            del ckpt\n\n        # end epoch ----------------------------------------------------------------------------------------------------\n    # end training\n\n    n = opt.name\n    if len(n):\n        n = '_' + n if not n.isnumeric() else n\n        fresults, flast, fbest = 'results%s.txt' % n, wdir + 'last%s.pt' % n, wdir + 'best%s.pt' % n\n        for f1, f2 in zip([wdir + 'last.pt', wdir + 'best.pt', 'results.txt'], [flast, fbest, fresults]):\n            if os.path.exists(f1):\n                os.rename(f1, f2)  # rename\n                ispt = f2.endswith('.pt')  # is *.pt\n                strip_optimizer(f2) if ispt else None  # strip optimizer\n                os.system('gsutil cp %s gs://%s/weights' % (f2, opt.bucket)) if opt.bucket and ispt else None  # upload\n\n    if not opt.evolve:\n        # plot_results()  # save as results.png\n        pass\n    print('%g epochs completed in %.3f hours.\n' % (epoch - start_epoch + 1, (time.time() - t0) / 3600))\n    dist.destroy_process_group() if torch.cuda.device_count() > 1 else None\n    torch.cuda.empty_cache()\n    return results,type='function_definition'\nline_star:59,line_end:360|char_star:0,char_end:18"[shape="box",fillcolor="#cee6b4",style=filled];
"MODULE"->"def train(hyp):\n    epochs = opt.epochs  # 300\n    batch_size = opt.batch_size  # 64\n    weights = opt.weights  # initial training weights\n\n    # Configure\n    init_seeds(1)\n    with open(opt.data) as f:\n        data_dict = yaml.load(f, Loader=yaml.FullLoader)  # model dict\n    train_path = data_dict['train']\n    test_path = data_dict['val']\n    nc = 1 if opt.single_cls else int(data_dict['nc'])  # number of classes\n\n    # Remove previous results\n    for f in glob.glob('*_batch*.jpg') + glob.glob(results_file):\n        os.remove(f)\n\n    # Create model\n    model = Model(opt.cfg).to(device)\n    assert model.md['nc'] == nc, '%s nc=%g classes but %s nc=%g classes' % (opt.data, nc, opt.cfg, model.md['nc'])\n\n    # Image sizes\n    gs = int(max(model.stride))  # grid size (max stride)\n    if any(x % gs != 0 for x in opt.img_size):\n        print('WARNING: --img-size %g,%g must be multiple of %s max stride %g' % (*opt.img_size, opt.cfg, gs))\n    imgsz, imgsz_test = [make_divisible(x, gs) for x in opt.img_size]  # image sizes (train, test)\n\n    # Optimizer\n    nbs = 64  # nominal batch size\n    accumulate = max(round(nbs / batch_size), 1)  # accumulate loss before optimizing\n    hyp['weight_decay'] *= batch_size * accumulate / nbs  # scale weight_decay\n    pg0, pg1, pg2 = [], [], []  # optimizer parameter groups\n    for k, v in model.named_parameters():\n        if v.requires_grad:\n            if '.bias' in k:\n                pg2.append(v)  # biases\n            elif '.weight' in k and '.bn' not in k:\n                pg1.append(v)  # apply weight decay\n            else:\n                pg0.append(v)  # all else\n\n    optimizer = optim.Adam(pg0, lr=hyp['lr0']) if opt.adam else \\n        optim.SGD(pg0, lr=hyp['lr0'], momentum=hyp['momentum'], nesterov=True)\n    optimizer.add_param_group({'params': pg1, 'weight_decay': hyp['weight_decay']})  # add pg1 with weight_decay\n    optimizer.add_param_group({'params': pg2})  # add pg2 (biases)\n    print('Optimizer groups: %g .bias, %g conv.weight, %g other' % (len(pg2), len(pg1), len(pg0)))\n    del pg0, pg1, pg2\n\n    # Load Model\n    google_utils.attempt_download(weights)\n    start_epoch, best_fitness = 0, 0.0\n    if weights.endswith('.pt'):  # pytorch format\n        ckpt = torch.load(weights, map_location=device)  # load checkpoint\n\n        # load model\n        try:\n            ckpt['model'] = \\n                {k: v for k, v in ckpt['model'].state_dict().items() if model.state_dict()[k].numel() == v.numel()}\n            model.load_state_dict(ckpt['model'], strict=False)\n        except KeyError as e:\n            s = '%s is not compatible with %s. Specify --weights '' or specify a --cfg compatible with %s.' \\n                % (opt.weights, opt.cfg, opt.weights)\n            raise KeyError(s) from e\n\n        # load optimizer\n        if ckpt['optimizer'] is not None:\n            optimizer.load_state_dict(ckpt['optimizer'])\n            best_fitness = ckpt['best_fitness']\n\n        # load results\n        if ckpt.get('training_results') is not None:\n            with open(results_file, 'w') as file:\n                file.write(ckpt['training_results'])  # write results.txt\n\n        start_epoch = ckpt['epoch'] + 1\n        del ckpt\n\n    # Mixed precision training https://github.com/NVIDIA/apex\n    if mixed_precision:\n        model, optimizer = amp.initialize(model, optimizer, opt_level='O1', verbosity=0)\n\n    # Scheduler https://arxiv.org/pdf/1812.01187.pdf\n    lf = lambda x: (((1 + math.cos(x * math.pi / epochs)) / 2) ** 1.0) * 0.9 + 0.1  # cosine\n    scheduler = lr_scheduler.LambdaLR(optimizer, lr_lambda=lf)\n    scheduler.last_epoch = start_epoch - 1  # do not move\n    # https://discuss.pytorch.org/t/a-problem-occured-when-resuming-an-optimizer/28822\n    # plot_lr_scheduler(optimizer, scheduler, epochs)\n\n    # Initialize distributed training\n    if device.type != 'cpu' and torch.cuda.device_count() > 1 and torch.distributed.is_available():\n        dist.init_process_group(backend='nccl',  # distributed backend\n                                init_method='tcp://127.0.0.1:9999',  # init method\n                                world_size=1,  # number of nodes\n                                rank=0)  # node rank\n        model = torch.nn.parallel.DistributedDataParallel(model)\n\n    # Dataset\n    dataset = LoadImagesAndLabels(train_path, imgsz, batch_size,\n                                  augment=True,\n                                  hyp=hyp,  # augmentation hyperparameters\n                                  rect=opt.rect,  # rectangular training\n                                  cache_images=opt.cache_images,\n                                  single_cls=opt.single_cls)\n    mlc = np.concatenate(dataset.labels, 0)[:, 0].max()  # max label class\n    assert mlc < nc, 'Label class %g exceeds nc=%g in %s. Correct your labels or your model.' % (mlc, nc, opt.cfg)\n\n    # Dataloader\n    batch_size = min(batch_size, len(dataset))\n    nw = min([os.cpu_count(), batch_size if batch_size > 1 else 0, 8])  # number of workers\n    dataloader = torch.utils.data.DataLoader(dataset,\n                                             batch_size=batch_size,\n                                             num_workers=nw,\n                                             shuffle=not opt.rect,  # Shuffle=True unless rectangular training is used\n                                             pin_memory=True,\n                                             collate_fn=dataset.collate_fn)\n\n    # Testloader\n    testloader = torch.utils.data.DataLoader(LoadImagesAndLabels(test_path, imgsz_test, batch_size,\n                                                                 hyp=hyp,\n                                                                 rect=True,\n                                                                 cache_images=opt.cache_images,\n                                                                 single_cls=opt.single_cls),\n                                             batch_size=batch_size,\n                                             num_workers=nw,\n                                             pin_memory=True,\n                                             collate_fn=dataset.collate_fn)\n\n    # Model parameters\n    hyp['cls'] *= nc / 80.  # scale coco-tuned hyp['cls'] to current dataset\n    model.nc = nc  # attach number of classes to model\n    model.hyp = hyp  # attach hyperparameters to model\n    model.gr = 1.0  # giou loss ratio (obj_loss = 1.0 or giou)\n    model.class_weights = labels_to_class_weights(dataset.labels, nc).to(device)  # attach class weights\n    model.names = data_dict['names']\n\n    # class frequency\n    labels = np.concatenate(dataset.labels, 0)\n    c = torch.tensor(labels[:, 0])  # classes\n    # cf = torch.bincount(c.long(), minlength=nc) + 1.\n    # model._initialize_biases(cf.to(device))\n    # plot_labels(labels)  #<----------------------------close by xujing\n    tb_writer.add_histogram('classes', c, 0)\n\n    # Exponential moving average\n    ema = torch_utils.ModelEMA(model)\n\n    # Start training\n    t0 = time.time()\n    nb = len(dataloader)  # number of batches\n    n_burn = max(3 * nb, 1e3)  # burn-in iterations, max(3 epochs, 1k iterations)\n    maps = np.zeros(nc)  # mAP per class\n    results = (0, 0, 0, 0, 0, 0, 0)  # 'P', 'R', 'mAP', 'F1', 'val GIoU', 'val Objectness', 'val Classification'\n    print('Image sizes %g train, %g test' % (imgsz, imgsz_test))\n    print('Using %g dataloader workers' % nw)\n    print('Starting training for %g epochs...' % epochs)\n    # torch.autograd.set_detect_anomaly(True)\n    for epoch in range(start_epoch, epochs):  # epoch ------------------------------------------------------------------\n        model.train()\n\n        # Update image weights (optional)\n        if dataset.image_weights:\n            w = model.class_weights.cpu().numpy() * (1 - maps) ** 2  # class weights\n            image_weights = labels_to_image_weights(dataset.labels, nc=nc, class_weights=w)\n            dataset.indices = random.choices(range(dataset.n), weights=image_weights, k=dataset.n)  # rand weighted idx\n\n        mloss = torch.zeros(4, device=device)  # mean losses\n        print(('\n' + '%10s' * 8) % ('Epoch', 'gpu_mem', 'GIoU', 'obj', 'cls', 'total', 'targets', 'img_size'))\n        pbar = tqdm(enumerate(dataloader), total=nb)  # progress bar\n        for i, (imgs, targets, paths, _) in pbar:  # batch -------------------------------------------------------------\n            ni = i + nb * epoch  # number integrated batches (since train start)\n            imgs = imgs.to(device).float() / 255.0  # uint8 to float32, 0 - 255 to 0.0 - 1.0\n\n            # Burn-in\n            if ni <= n_burn:\n                xi = [0, n_burn]  # x interp\n                # model.gr = np.interp(ni, xi, [0.0, 1.0])  # giou loss ratio (obj_loss = 1.0 or giou)\n                accumulate = max(1, np.interp(ni, xi, [1, nbs / batch_size]).round())\n                for j, x in enumerate(optimizer.param_groups):\n                    # bias lr falls from 0.1 to lr0, all other lrs rise from 0.0 to lr0\n                    x['lr'] = np.interp(ni, xi, [0.1 if j == 2 else 0.0, x['initial_lr'] * lf(epoch)])\n                    if 'momentum' in x:\n                        x['momentum'] = np.interp(ni, xi, [0.9, hyp['momentum']])\n\n            # Multi-scale\n            if opt.multi_scale:\n                sz = random.randrange(imgsz * 0.5, imgsz * 1.5 + gs) // gs * gs  # size\n                sf = sz / max(imgs.shape[2:])  # scale factor\n                if sf != 1:\n                    ns = [math.ceil(x * sf / gs) * gs for x in imgs.shape[2:]]  # new shape (stretched to gs-multiple)\n                    imgs = F.interpolate(imgs, size=ns, mode='bilinear', align_corners=False)\n\n            # Forward\n            pred = model(imgs)\n\n            # Loss\n            loss, loss_items = compute_loss(pred, targets.to(device), model)\n            if not torch.isfinite(loss):\n                print('WARNING: non-finite loss, ending training ', loss_items)\n                return results\n\n            # Backward\n            if mixed_precision:\n                with amp.scale_loss(loss, optimizer) as scaled_loss:\n                    scaled_loss.backward()\n            else:\n                loss.backward()\n\n            # Optimize\n            if ni % accumulate == 0:\n                optimizer.step()\n                optimizer.zero_grad()\n                ema.update(model)\n\n            # Print\n            mloss = (mloss * i + loss_items) / (i + 1)  # update mean losses\n            mem = '%.3gG' % (torch.cuda.memory_cached() / 1E9 if torch.cuda.is_available() else 0)  # (GB)\n            s = ('%10s' * 2 + '%10.4g' * 6) % (\n                '%g/%g' % (epoch, epochs - 1), mem, *mloss, targets.shape[0], imgs.shape[-1])\n            pbar.set_description(s)\n\n            # Plot\n            if ni < 3:\n                f = 'train_batch%g.jpg' % i  # filename\n                res = plot_images(images=imgs, targets=targets, paths=paths, fname=f)\n                if tb_writer:\n                    tb_writer.add_image(f, res, dataformats='HWC', global_step=epoch)\n                    # tb_writer.add_graph(model, imgs)  # add model to tensorboard\n\n            # end batch ------------------------------------------------------------------------------------------------\n\n        # Scheduler\n        scheduler.step()\n\n        # mAP\n        ema.update_attr(model)\n        final_epoch = epoch + 1 == epochs\n        if not opt.notest or final_epoch:  # Calculate mAP\n            results, maps, times = test.test(opt.data,\n                                             batch_size=batch_size,\n                                             imgsz=imgsz_test,\n                                             save_json=final_epoch and opt.data.endswith(os.sep + 'coco.yaml'),\n                                             model=ema.ema,\n                                             single_cls=opt.single_cls,\n                                             dataloader=testloader,\n                                             fast=ni < n_burn)\n\n        # Write\n        with open(results_file, 'a') as f:\n            f.write(s + '%10.4g' * 7 % results + '\n')  # P, R, mAP, F1, test_losses=(GIoU, obj, cls)\n        if len(opt.name) and opt.bucket:\n            os.system('gsutil cp results.txt gs://%s/results/results%s.txt' % (opt.bucket, opt.name))\n\n        # Tensorboard\n        if tb_writer:\n            tags = ['train/giou_loss', 'train/obj_loss', 'train/cls_loss',\n                    'metrics/precision', 'metrics/recall', 'metrics/mAP_0.5', 'metrics/F1',\n                    'val/giou_loss', 'val/obj_loss', 'val/cls_loss']\n            for x, tag in zip(list(mloss[:-1]) + list(results), tags):\n                tb_writer.add_scalar(tag, x, epoch)\n\n        # Update best mAP\n        fi = fitness(np.array(results).reshape(1, -1))  # fitness_i = weighted combination of [P, R, mAP, F1]\n        if fi > best_fitness:\n            best_fitness = fi\n\n        # Save model\n        save = (not opt.nosave) or (final_epoch and not opt.evolve)\n        if save:\n            with open(results_file, 'r') as f:  # create checkpoint\n                ckpt = {'epoch': epoch,\n                        'best_fitness': best_fitness,\n                        'training_results': f.read(),\n                        'model': ema.ema.module if hasattr(model, 'module') else ema.ema,\n                        'optimizer': None if final_epoch else optimizer.state_dict()}\n\n            # Save last, best and delete\n            torch.save(ckpt, last)\n            if (best_fitness == fi) and not final_epoch:\n                torch.save(ckpt, best)\n            del ckpt\n\n        # end epoch ----------------------------------------------------------------------------------------------------\n    # end training\n\n    n = opt.name\n    if len(n):\n        n = '_' + n if not n.isnumeric() else n\n        fresults, flast, fbest = 'results%s.txt' % n, wdir + 'last%s.pt' % n, wdir + 'best%s.pt' % n\n        for f1, f2 in zip([wdir + 'last.pt', wdir + 'best.pt', 'results.txt'], [flast, fbest, fresults]):\n            if os.path.exists(f1):\n                os.rename(f1, f2)  # rename\n                ispt = f2.endswith('.pt')  # is *.pt\n                strip_optimizer(f2) if ispt else None  # strip optimizer\n                os.system('gsutil cp %s gs://%s/weights' % (f2, opt.bucket)) if opt.bucket and ispt else None  # upload\n\n    if not opt.evolve:\n        # plot_results()  # save as results.png\n        pass\n    print('%g epochs completed in %.3f hours.\n' % (epoch - start_epoch + 1, (time.time() - t0) / 3600))\n    dist.destroy_process_group() if torch.cuda.device_count() > 1 else None\n    torch.cuda.empty_cache()\n    return results,type='function_definition'\nline_star:59,line_end:360|char_star:0,char_end:18";
"train,type='identifier'\nline_star:59,line_end:59|char_star:4,char_end:9"[shape="point",fillcolor="#121013",style=filled];
"def train(hyp):\n    epochs = opt.epochs  # 300\n    batch_size = opt.batch_size  # 64\n    weights = opt.weights  # initial training weights\n\n    # Configure\n    init_seeds(1)\n    with open(opt.data) as f:\n        data_dict = yaml.load(f, Loader=yaml.FullLoader)  # model dict\n    train_path = data_dict['train']\n    test_path = data_dict['val']\n    nc = 1 if opt.single_cls else int(data_dict['nc'])  # number of classes\n\n    # Remove previous results\n    for f in glob.glob('*_batch*.jpg') + glob.glob(results_file):\n        os.remove(f)\n\n    # Create model\n    model = Model(opt.cfg).to(device)\n    assert model.md['nc'] == nc, '%s nc=%g classes but %s nc=%g classes' % (opt.data, nc, opt.cfg, model.md['nc'])\n\n    # Image sizes\n    gs = int(max(model.stride))  # grid size (max stride)\n    if any(x % gs != 0 for x in opt.img_size):\n        print('WARNING: --img-size %g,%g must be multiple of %s max stride %g' % (*opt.img_size, opt.cfg, gs))\n    imgsz, imgsz_test = [make_divisible(x, gs) for x in opt.img_size]  # image sizes (train, test)\n\n    # Optimizer\n    nbs = 64  # nominal batch size\n    accumulate = max(round(nbs / batch_size), 1)  # accumulate loss before optimizing\n    hyp['weight_decay'] *= batch_size * accumulate / nbs  # scale weight_decay\n    pg0, pg1, pg2 = [], [], []  # optimizer parameter groups\n    for k, v in model.named_parameters():\n        if v.requires_grad:\n            if '.bias' in k:\n                pg2.append(v)  # biases\n            elif '.weight' in k and '.bn' not in k:\n                pg1.append(v)  # apply weight decay\n            else:\n                pg0.append(v)  # all else\n\n    optimizer = optim.Adam(pg0, lr=hyp['lr0']) if opt.adam else \\n        optim.SGD(pg0, lr=hyp['lr0'], momentum=hyp['momentum'], nesterov=True)\n    optimizer.add_param_group({'params': pg1, 'weight_decay': hyp['weight_decay']})  # add pg1 with weight_decay\n    optimizer.add_param_group({'params': pg2})  # add pg2 (biases)\n    print('Optimizer groups: %g .bias, %g conv.weight, %g other' % (len(pg2), len(pg1), len(pg0)))\n    del pg0, pg1, pg2\n\n    # Load Model\n    google_utils.attempt_download(weights)\n    start_epoch, best_fitness = 0, 0.0\n    if weights.endswith('.pt'):  # pytorch format\n        ckpt = torch.load(weights, map_location=device)  # load checkpoint\n\n        # load model\n        try:\n            ckpt['model'] = \\n                {k: v for k, v in ckpt['model'].state_dict().items() if model.state_dict()[k].numel() == v.numel()}\n            model.load_state_dict(ckpt['model'], strict=False)\n        except KeyError as e:\n            s = '%s is not compatible with %s. Specify --weights '' or specify a --cfg compatible with %s.' \\n                % (opt.weights, opt.cfg, opt.weights)\n            raise KeyError(s) from e\n\n        # load optimizer\n        if ckpt['optimizer'] is not None:\n            optimizer.load_state_dict(ckpt['optimizer'])\n            best_fitness = ckpt['best_fitness']\n\n        # load results\n        if ckpt.get('training_results') is not None:\n            with open(results_file, 'w') as file:\n                file.write(ckpt['training_results'])  # write results.txt\n\n        start_epoch = ckpt['epoch'] + 1\n        del ckpt\n\n    # Mixed precision training https://github.com/NVIDIA/apex\n    if mixed_precision:\n        model, optimizer = amp.initialize(model, optimizer, opt_level='O1', verbosity=0)\n\n    # Scheduler https://arxiv.org/pdf/1812.01187.pdf\n    lf = lambda x: (((1 + math.cos(x * math.pi / epochs)) / 2) ** 1.0) * 0.9 + 0.1  # cosine\n    scheduler = lr_scheduler.LambdaLR(optimizer, lr_lambda=lf)\n    scheduler.last_epoch = start_epoch - 1  # do not move\n    # https://discuss.pytorch.org/t/a-problem-occured-when-resuming-an-optimizer/28822\n    # plot_lr_scheduler(optimizer, scheduler, epochs)\n\n    # Initialize distributed training\n    if device.type != 'cpu' and torch.cuda.device_count() > 1 and torch.distributed.is_available():\n        dist.init_process_group(backend='nccl',  # distributed backend\n                                init_method='tcp://127.0.0.1:9999',  # init method\n                                world_size=1,  # number of nodes\n                                rank=0)  # node rank\n        model = torch.nn.parallel.DistributedDataParallel(model)\n\n    # Dataset\n    dataset = LoadImagesAndLabels(train_path, imgsz, batch_size,\n                                  augment=True,\n                                  hyp=hyp,  # augmentation hyperparameters\n                                  rect=opt.rect,  # rectangular training\n                                  cache_images=opt.cache_images,\n                                  single_cls=opt.single_cls)\n    mlc = np.concatenate(dataset.labels, 0)[:, 0].max()  # max label class\n    assert mlc < nc, 'Label class %g exceeds nc=%g in %s. Correct your labels or your model.' % (mlc, nc, opt.cfg)\n\n    # Dataloader\n    batch_size = min(batch_size, len(dataset))\n    nw = min([os.cpu_count(), batch_size if batch_size > 1 else 0, 8])  # number of workers\n    dataloader = torch.utils.data.DataLoader(dataset,\n                                             batch_size=batch_size,\n                                             num_workers=nw,\n                                             shuffle=not opt.rect,  # Shuffle=True unless rectangular training is used\n                                             pin_memory=True,\n                                             collate_fn=dataset.collate_fn)\n\n    # Testloader\n    testloader = torch.utils.data.DataLoader(LoadImagesAndLabels(test_path, imgsz_test, batch_size,\n                                                                 hyp=hyp,\n                                                                 rect=True,\n                                                                 cache_images=opt.cache_images,\n                                                                 single_cls=opt.single_cls),\n                                             batch_size=batch_size,\n                                             num_workers=nw,\n                                             pin_memory=True,\n                                             collate_fn=dataset.collate_fn)\n\n    # Model parameters\n    hyp['cls'] *= nc / 80.  # scale coco-tuned hyp['cls'] to current dataset\n    model.nc = nc  # attach number of classes to model\n    model.hyp = hyp  # attach hyperparameters to model\n    model.gr = 1.0  # giou loss ratio (obj_loss = 1.0 or giou)\n    model.class_weights = labels_to_class_weights(dataset.labels, nc).to(device)  # attach class weights\n    model.names = data_dict['names']\n\n    # class frequency\n    labels = np.concatenate(dataset.labels, 0)\n    c = torch.tensor(labels[:, 0])  # classes\n    # cf = torch.bincount(c.long(), minlength=nc) + 1.\n    # model._initialize_biases(cf.to(device))\n    # plot_labels(labels)  #<----------------------------close by xujing\n    tb_writer.add_histogram('classes', c, 0)\n\n    # Exponential moving average\n    ema = torch_utils.ModelEMA(model)\n\n    # Start training\n    t0 = time.time()\n    nb = len(dataloader)  # number of batches\n    n_burn = max(3 * nb, 1e3)  # burn-in iterations, max(3 epochs, 1k iterations)\n    maps = np.zeros(nc)  # mAP per class\n    results = (0, 0, 0, 0, 0, 0, 0)  # 'P', 'R', 'mAP', 'F1', 'val GIoU', 'val Objectness', 'val Classification'\n    print('Image sizes %g train, %g test' % (imgsz, imgsz_test))\n    print('Using %g dataloader workers' % nw)\n    print('Starting training for %g epochs...' % epochs)\n    # torch.autograd.set_detect_anomaly(True)\n    for epoch in range(start_epoch, epochs):  # epoch ------------------------------------------------------------------\n        model.train()\n\n        # Update image weights (optional)\n        if dataset.image_weights:\n            w = model.class_weights.cpu().numpy() * (1 - maps) ** 2  # class weights\n            image_weights = labels_to_image_weights(dataset.labels, nc=nc, class_weights=w)\n            dataset.indices = random.choices(range(dataset.n), weights=image_weights, k=dataset.n)  # rand weighted idx\n\n        mloss = torch.zeros(4, device=device)  # mean losses\n        print(('\n' + '%10s' * 8) % ('Epoch', 'gpu_mem', 'GIoU', 'obj', 'cls', 'total', 'targets', 'img_size'))\n        pbar = tqdm(enumerate(dataloader), total=nb)  # progress bar\n        for i, (imgs, targets, paths, _) in pbar:  # batch -------------------------------------------------------------\n            ni = i + nb * epoch  # number integrated batches (since train start)\n            imgs = imgs.to(device).float() / 255.0  # uint8 to float32, 0 - 255 to 0.0 - 1.0\n\n            # Burn-in\n            if ni <= n_burn:\n                xi = [0, n_burn]  # x interp\n                # model.gr = np.interp(ni, xi, [0.0, 1.0])  # giou loss ratio (obj_loss = 1.0 or giou)\n                accumulate = max(1, np.interp(ni, xi, [1, nbs / batch_size]).round())\n                for j, x in enumerate(optimizer.param_groups):\n                    # bias lr falls from 0.1 to lr0, all other lrs rise from 0.0 to lr0\n                    x['lr'] = np.interp(ni, xi, [0.1 if j == 2 else 0.0, x['initial_lr'] * lf(epoch)])\n                    if 'momentum' in x:\n                        x['momentum'] = np.interp(ni, xi, [0.9, hyp['momentum']])\n\n            # Multi-scale\n            if opt.multi_scale:\n                sz = random.randrange(imgsz * 0.5, imgsz * 1.5 + gs) // gs * gs  # size\n                sf = sz / max(imgs.shape[2:])  # scale factor\n                if sf != 1:\n                    ns = [math.ceil(x * sf / gs) * gs for x in imgs.shape[2:]]  # new shape (stretched to gs-multiple)\n                    imgs = F.interpolate(imgs, size=ns, mode='bilinear', align_corners=False)\n\n            # Forward\n            pred = model(imgs)\n\n            # Loss\n            loss, loss_items = compute_loss(pred, targets.to(device), model)\n            if not torch.isfinite(loss):\n                print('WARNING: non-finite loss, ending training ', loss_items)\n                return results\n\n            # Backward\n            if mixed_precision:\n                with amp.scale_loss(loss, optimizer) as scaled_loss:\n                    scaled_loss.backward()\n            else:\n                loss.backward()\n\n            # Optimize\n            if ni % accumulate == 0:\n                optimizer.step()\n                optimizer.zero_grad()\n                ema.update(model)\n\n            # Print\n            mloss = (mloss * i + loss_items) / (i + 1)  # update mean losses\n            mem = '%.3gG' % (torch.cuda.memory_cached() / 1E9 if torch.cuda.is_available() else 0)  # (GB)\n            s = ('%10s' * 2 + '%10.4g' * 6) % (\n                '%g/%g' % (epoch, epochs - 1), mem, *mloss, targets.shape[0], imgs.shape[-1])\n            pbar.set_description(s)\n\n            # Plot\n            if ni < 3:\n                f = 'train_batch%g.jpg' % i  # filename\n                res = plot_images(images=imgs, targets=targets, paths=paths, fname=f)\n                if tb_writer:\n                    tb_writer.add_image(f, res, dataformats='HWC', global_step=epoch)\n                    # tb_writer.add_graph(model, imgs)  # add model to tensorboard\n\n            # end batch ------------------------------------------------------------------------------------------------\n\n        # Scheduler\n        scheduler.step()\n\n        # mAP\n        ema.update_attr(model)\n        final_epoch = epoch + 1 == epochs\n        if not opt.notest or final_epoch:  # Calculate mAP\n            results, maps, times = test.test(opt.data,\n                                             batch_size=batch_size,\n                                             imgsz=imgsz_test,\n                                             save_json=final_epoch and opt.data.endswith(os.sep + 'coco.yaml'),\n                                             model=ema.ema,\n                                             single_cls=opt.single_cls,\n                                             dataloader=testloader,\n                                             fast=ni < n_burn)\n\n        # Write\n        with open(results_file, 'a') as f:\n            f.write(s + '%10.4g' * 7 % results + '\n')  # P, R, mAP, F1, test_losses=(GIoU, obj, cls)\n        if len(opt.name) and opt.bucket:\n            os.system('gsutil cp results.txt gs://%s/results/results%s.txt' % (opt.bucket, opt.name))\n\n        # Tensorboard\n        if tb_writer:\n            tags = ['train/giou_loss', 'train/obj_loss', 'train/cls_loss',\n                    'metrics/precision', 'metrics/recall', 'metrics/mAP_0.5', 'metrics/F1',\n                    'val/giou_loss', 'val/obj_loss', 'val/cls_loss']\n            for x, tag in zip(list(mloss[:-1]) + list(results), tags):\n                tb_writer.add_scalar(tag, x, epoch)\n\n        # Update best mAP\n        fi = fitness(np.array(results).reshape(1, -1))  # fitness_i = weighted combination of [P, R, mAP, F1]\n        if fi > best_fitness:\n            best_fitness = fi\n\n        # Save model\n        save = (not opt.nosave) or (final_epoch and not opt.evolve)\n        if save:\n            with open(results_file, 'r') as f:  # create checkpoint\n                ckpt = {'epoch': epoch,\n                        'best_fitness': best_fitness,\n                        'training_results': f.read(),\n                        'model': ema.ema.module if hasattr(model, 'module') else ema.ema,\n                        'optimizer': None if final_epoch else optimizer.state_dict()}\n\n            # Save last, best and delete\n            torch.save(ckpt, last)\n            if (best_fitness == fi) and not final_epoch:\n                torch.save(ckpt, best)\n            del ckpt\n\n        # end epoch ----------------------------------------------------------------------------------------------------\n    # end training\n\n    n = opt.name\n    if len(n):\n        n = '_' + n if not n.isnumeric() else n\n        fresults, flast, fbest = 'results%s.txt' % n, wdir + 'last%s.pt' % n, wdir + 'best%s.pt' % n\n        for f1, f2 in zip([wdir + 'last.pt', wdir + 'best.pt', 'results.txt'], [flast, fbest, fresults]):\n            if os.path.exists(f1):\n                os.rename(f1, f2)  # rename\n                ispt = f2.endswith('.pt')  # is *.pt\n                strip_optimizer(f2) if ispt else None  # strip optimizer\n                os.system('gsutil cp %s gs://%s/weights' % (f2, opt.bucket)) if opt.bucket and ispt else None  # upload\n\n    if not opt.evolve:\n        # plot_results()  # save as results.png\n        pass\n    print('%g epochs completed in %.3f hours.\n' % (epoch - start_epoch + 1, (time.time() - t0) / 3600))\n    dist.destroy_process_group() if torch.cuda.device_count() > 1 else None\n    torch.cuda.empty_cache()\n    return results,type='function_definition'\nline_star:59,line_end:360|char_star:0,char_end:18"->"train,type='identifier'\nline_star:59,line_end:59|char_star:4,char_end:9";
"(hyp),type='parameters'\nline_star:59,line_end:59|char_star:9,char_end:14"[shape="box",fillcolor="white",style=filled];
"def train(hyp):\n    epochs = opt.epochs  # 300\n    batch_size = opt.batch_size  # 64\n    weights = opt.weights  # initial training weights\n\n    # Configure\n    init_seeds(1)\n    with open(opt.data) as f:\n        data_dict = yaml.load(f, Loader=yaml.FullLoader)  # model dict\n    train_path = data_dict['train']\n    test_path = data_dict['val']\n    nc = 1 if opt.single_cls else int(data_dict['nc'])  # number of classes\n\n    # Remove previous results\n    for f in glob.glob('*_batch*.jpg') + glob.glob(results_file):\n        os.remove(f)\n\n    # Create model\n    model = Model(opt.cfg).to(device)\n    assert model.md['nc'] == nc, '%s nc=%g classes but %s nc=%g classes' % (opt.data, nc, opt.cfg, model.md['nc'])\n\n    # Image sizes\n    gs = int(max(model.stride))  # grid size (max stride)\n    if any(x % gs != 0 for x in opt.img_size):\n        print('WARNING: --img-size %g,%g must be multiple of %s max stride %g' % (*opt.img_size, opt.cfg, gs))\n    imgsz, imgsz_test = [make_divisible(x, gs) for x in opt.img_size]  # image sizes (train, test)\n\n    # Optimizer\n    nbs = 64  # nominal batch size\n    accumulate = max(round(nbs / batch_size), 1)  # accumulate loss before optimizing\n    hyp['weight_decay'] *= batch_size * accumulate / nbs  # scale weight_decay\n    pg0, pg1, pg2 = [], [], []  # optimizer parameter groups\n    for k, v in model.named_parameters():\n        if v.requires_grad:\n            if '.bias' in k:\n                pg2.append(v)  # biases\n            elif '.weight' in k and '.bn' not in k:\n                pg1.append(v)  # apply weight decay\n            else:\n                pg0.append(v)  # all else\n\n    optimizer = optim.Adam(pg0, lr=hyp['lr0']) if opt.adam else \\n        optim.SGD(pg0, lr=hyp['lr0'], momentum=hyp['momentum'], nesterov=True)\n    optimizer.add_param_group({'params': pg1, 'weight_decay': hyp['weight_decay']})  # add pg1 with weight_decay\n    optimizer.add_param_group({'params': pg2})  # add pg2 (biases)\n    print('Optimizer groups: %g .bias, %g conv.weight, %g other' % (len(pg2), len(pg1), len(pg0)))\n    del pg0, pg1, pg2\n\n    # Load Model\n    google_utils.attempt_download(weights)\n    start_epoch, best_fitness = 0, 0.0\n    if weights.endswith('.pt'):  # pytorch format\n        ckpt = torch.load(weights, map_location=device)  # load checkpoint\n\n        # load model\n        try:\n            ckpt['model'] = \\n                {k: v for k, v in ckpt['model'].state_dict().items() if model.state_dict()[k].numel() == v.numel()}\n            model.load_state_dict(ckpt['model'], strict=False)\n        except KeyError as e:\n            s = '%s is not compatible with %s. Specify --weights '' or specify a --cfg compatible with %s.' \\n                % (opt.weights, opt.cfg, opt.weights)\n            raise KeyError(s) from e\n\n        # load optimizer\n        if ckpt['optimizer'] is not None:\n            optimizer.load_state_dict(ckpt['optimizer'])\n            best_fitness = ckpt['best_fitness']\n\n        # load results\n        if ckpt.get('training_results') is not None:\n            with open(results_file, 'w') as file:\n                file.write(ckpt['training_results'])  # write results.txt\n\n        start_epoch = ckpt['epoch'] + 1\n        del ckpt\n\n    # Mixed precision training https://github.com/NVIDIA/apex\n    if mixed_precision:\n        model, optimizer = amp.initialize(model, optimizer, opt_level='O1', verbosity=0)\n\n    # Scheduler https://arxiv.org/pdf/1812.01187.pdf\n    lf = lambda x: (((1 + math.cos(x * math.pi / epochs)) / 2) ** 1.0) * 0.9 + 0.1  # cosine\n    scheduler = lr_scheduler.LambdaLR(optimizer, lr_lambda=lf)\n    scheduler.last_epoch = start_epoch - 1  # do not move\n    # https://discuss.pytorch.org/t/a-problem-occured-when-resuming-an-optimizer/28822\n    # plot_lr_scheduler(optimizer, scheduler, epochs)\n\n    # Initialize distributed training\n    if device.type != 'cpu' and torch.cuda.device_count() > 1 and torch.distributed.is_available():\n        dist.init_process_group(backend='nccl',  # distributed backend\n                                init_method='tcp://127.0.0.1:9999',  # init method\n                                world_size=1,  # number of nodes\n                                rank=0)  # node rank\n        model = torch.nn.parallel.DistributedDataParallel(model)\n\n    # Dataset\n    dataset = LoadImagesAndLabels(train_path, imgsz, batch_size,\n                                  augment=True,\n                                  hyp=hyp,  # augmentation hyperparameters\n                                  rect=opt.rect,  # rectangular training\n                                  cache_images=opt.cache_images,\n                                  single_cls=opt.single_cls)\n    mlc = np.concatenate(dataset.labels, 0)[:, 0].max()  # max label class\n    assert mlc < nc, 'Label class %g exceeds nc=%g in %s. Correct your labels or your model.' % (mlc, nc, opt.cfg)\n\n    # Dataloader\n    batch_size = min(batch_size, len(dataset))\n    nw = min([os.cpu_count(), batch_size if batch_size > 1 else 0, 8])  # number of workers\n    dataloader = torch.utils.data.DataLoader(dataset,\n                                             batch_size=batch_size,\n                                             num_workers=nw,\n                                             shuffle=not opt.rect,  # Shuffle=True unless rectangular training is used\n                                             pin_memory=True,\n                                             collate_fn=dataset.collate_fn)\n\n    # Testloader\n    testloader = torch.utils.data.DataLoader(LoadImagesAndLabels(test_path, imgsz_test, batch_size,\n                                                                 hyp=hyp,\n                                                                 rect=True,\n                                                                 cache_images=opt.cache_images,\n                                                                 single_cls=opt.single_cls),\n                                             batch_size=batch_size,\n                                             num_workers=nw,\n                                             pin_memory=True,\n                                             collate_fn=dataset.collate_fn)\n\n    # Model parameters\n    hyp['cls'] *= nc / 80.  # scale coco-tuned hyp['cls'] to current dataset\n    model.nc = nc  # attach number of classes to model\n    model.hyp = hyp  # attach hyperparameters to model\n    model.gr = 1.0  # giou loss ratio (obj_loss = 1.0 or giou)\n    model.class_weights = labels_to_class_weights(dataset.labels, nc).to(device)  # attach class weights\n    model.names = data_dict['names']\n\n    # class frequency\n    labels = np.concatenate(dataset.labels, 0)\n    c = torch.tensor(labels[:, 0])  # classes\n    # cf = torch.bincount(c.long(), minlength=nc) + 1.\n    # model._initialize_biases(cf.to(device))\n    # plot_labels(labels)  #<----------------------------close by xujing\n    tb_writer.add_histogram('classes', c, 0)\n\n    # Exponential moving average\n    ema = torch_utils.ModelEMA(model)\n\n    # Start training\n    t0 = time.time()\n    nb = len(dataloader)  # number of batches\n    n_burn = max(3 * nb, 1e3)  # burn-in iterations, max(3 epochs, 1k iterations)\n    maps = np.zeros(nc)  # mAP per class\n    results = (0, 0, 0, 0, 0, 0, 0)  # 'P', 'R', 'mAP', 'F1', 'val GIoU', 'val Objectness', 'val Classification'\n    print('Image sizes %g train, %g test' % (imgsz, imgsz_test))\n    print('Using %g dataloader workers' % nw)\n    print('Starting training for %g epochs...' % epochs)\n    # torch.autograd.set_detect_anomaly(True)\n    for epoch in range(start_epoch, epochs):  # epoch ------------------------------------------------------------------\n        model.train()\n\n        # Update image weights (optional)\n        if dataset.image_weights:\n            w = model.class_weights.cpu().numpy() * (1 - maps) ** 2  # class weights\n            image_weights = labels_to_image_weights(dataset.labels, nc=nc, class_weights=w)\n            dataset.indices = random.choices(range(dataset.n), weights=image_weights, k=dataset.n)  # rand weighted idx\n\n        mloss = torch.zeros(4, device=device)  # mean losses\n        print(('\n' + '%10s' * 8) % ('Epoch', 'gpu_mem', 'GIoU', 'obj', 'cls', 'total', 'targets', 'img_size'))\n        pbar = tqdm(enumerate(dataloader), total=nb)  # progress bar\n        for i, (imgs, targets, paths, _) in pbar:  # batch -------------------------------------------------------------\n            ni = i + nb * epoch  # number integrated batches (since train start)\n            imgs = imgs.to(device).float() / 255.0  # uint8 to float32, 0 - 255 to 0.0 - 1.0\n\n            # Burn-in\n            if ni <= n_burn:\n                xi = [0, n_burn]  # x interp\n                # model.gr = np.interp(ni, xi, [0.0, 1.0])  # giou loss ratio (obj_loss = 1.0 or giou)\n                accumulate = max(1, np.interp(ni, xi, [1, nbs / batch_size]).round())\n                for j, x in enumerate(optimizer.param_groups):\n                    # bias lr falls from 0.1 to lr0, all other lrs rise from 0.0 to lr0\n                    x['lr'] = np.interp(ni, xi, [0.1 if j == 2 else 0.0, x['initial_lr'] * lf(epoch)])\n                    if 'momentum' in x:\n                        x['momentum'] = np.interp(ni, xi, [0.9, hyp['momentum']])\n\n            # Multi-scale\n            if opt.multi_scale:\n                sz = random.randrange(imgsz * 0.5, imgsz * 1.5 + gs) // gs * gs  # size\n                sf = sz / max(imgs.shape[2:])  # scale factor\n                if sf != 1:\n                    ns = [math.ceil(x * sf / gs) * gs for x in imgs.shape[2:]]  # new shape (stretched to gs-multiple)\n                    imgs = F.interpolate(imgs, size=ns, mode='bilinear', align_corners=False)\n\n            # Forward\n            pred = model(imgs)\n\n            # Loss\n            loss, loss_items = compute_loss(pred, targets.to(device), model)\n            if not torch.isfinite(loss):\n                print('WARNING: non-finite loss, ending training ', loss_items)\n                return results\n\n            # Backward\n            if mixed_precision:\n                with amp.scale_loss(loss, optimizer) as scaled_loss:\n                    scaled_loss.backward()\n            else:\n                loss.backward()\n\n            # Optimize\n            if ni % accumulate == 0:\n                optimizer.step()\n                optimizer.zero_grad()\n                ema.update(model)\n\n            # Print\n            mloss = (mloss * i + loss_items) / (i + 1)  # update mean losses\n            mem = '%.3gG' % (torch.cuda.memory_cached() / 1E9 if torch.cuda.is_available() else 0)  # (GB)\n            s = ('%10s' * 2 + '%10.4g' * 6) % (\n                '%g/%g' % (epoch, epochs - 1), mem, *mloss, targets.shape[0], imgs.shape[-1])\n            pbar.set_description(s)\n\n            # Plot\n            if ni < 3:\n                f = 'train_batch%g.jpg' % i  # filename\n                res = plot_images(images=imgs, targets=targets, paths=paths, fname=f)\n                if tb_writer:\n                    tb_writer.add_image(f, res, dataformats='HWC', global_step=epoch)\n                    # tb_writer.add_graph(model, imgs)  # add model to tensorboard\n\n            # end batch ------------------------------------------------------------------------------------------------\n\n        # Scheduler\n        scheduler.step()\n\n        # mAP\n        ema.update_attr(model)\n        final_epoch = epoch + 1 == epochs\n        if not opt.notest or final_epoch:  # Calculate mAP\n            results, maps, times = test.test(opt.data,\n                                             batch_size=batch_size,\n                                             imgsz=imgsz_test,\n                                             save_json=final_epoch and opt.data.endswith(os.sep + 'coco.yaml'),\n                                             model=ema.ema,\n                                             single_cls=opt.single_cls,\n                                             dataloader=testloader,\n                                             fast=ni < n_burn)\n\n        # Write\n        with open(results_file, 'a') as f:\n            f.write(s + '%10.4g' * 7 % results + '\n')  # P, R, mAP, F1, test_losses=(GIoU, obj, cls)\n        if len(opt.name) and opt.bucket:\n            os.system('gsutil cp results.txt gs://%s/results/results%s.txt' % (opt.bucket, opt.name))\n\n        # Tensorboard\n        if tb_writer:\n            tags = ['train/giou_loss', 'train/obj_loss', 'train/cls_loss',\n                    'metrics/precision', 'metrics/recall', 'metrics/mAP_0.5', 'metrics/F1',\n                    'val/giou_loss', 'val/obj_loss', 'val/cls_loss']\n            for x, tag in zip(list(mloss[:-1]) + list(results), tags):\n                tb_writer.add_scalar(tag, x, epoch)\n\n        # Update best mAP\n        fi = fitness(np.array(results).reshape(1, -1))  # fitness_i = weighted combination of [P, R, mAP, F1]\n        if fi > best_fitness:\n            best_fitness = fi\n\n        # Save model\n        save = (not opt.nosave) or (final_epoch and not opt.evolve)\n        if save:\n            with open(results_file, 'r') as f:  # create checkpoint\n                ckpt = {'epoch': epoch,\n                        'best_fitness': best_fitness,\n                        'training_results': f.read(),\n                        'model': ema.ema.module if hasattr(model, 'module') else ema.ema,\n                        'optimizer': None if final_epoch else optimizer.state_dict()}\n\n            # Save last, best and delete\n            torch.save(ckpt, last)\n            if (best_fitness == fi) and not final_epoch:\n                torch.save(ckpt, best)\n            del ckpt\n\n        # end epoch ----------------------------------------------------------------------------------------------------\n    # end training\n\n    n = opt.name\n    if len(n):\n        n = '_' + n if not n.isnumeric() else n\n        fresults, flast, fbest = 'results%s.txt' % n, wdir + 'last%s.pt' % n, wdir + 'best%s.pt' % n\n        for f1, f2 in zip([wdir + 'last.pt', wdir + 'best.pt', 'results.txt'], [flast, fbest, fresults]):\n            if os.path.exists(f1):\n                os.rename(f1, f2)  # rename\n                ispt = f2.endswith('.pt')  # is *.pt\n                strip_optimizer(f2) if ispt else None  # strip optimizer\n                os.system('gsutil cp %s gs://%s/weights' % (f2, opt.bucket)) if opt.bucket and ispt else None  # upload\n\n    if not opt.evolve:\n        # plot_results()  # save as results.png\n        pass\n    print('%g epochs completed in %.3f hours.\n' % (epoch - start_epoch + 1, (time.time() - t0) / 3600))\n    dist.destroy_process_group() if torch.cuda.device_count() > 1 else None\n    torch.cuda.empty_cache()\n    return results,type='function_definition'\nline_star:59,line_end:360|char_star:0,char_end:18"->"(hyp),type='parameters'\nline_star:59,line_end:59|char_star:9,char_end:14";
"hyp,type='identifier'\nline_star:59,line_end:59|char_star:10,char_end:13"[shape="point",fillcolor="#121013",style=filled];
"(hyp),type='parameters'\nline_star:59,line_end:59|char_star:9,char_end:14"->"hyp,type='identifier'\nline_star:59,line_end:59|char_star:10,char_end:13";
"type='INFORMATION BLOCK'\nline_star:60,line_end:360|char_star:4,char_end:18"[shape="point",fillcolor="#121013",style=filled];
"def train(hyp):\n    epochs = opt.epochs  # 300\n    batch_size = opt.batch_size  # 64\n    weights = opt.weights  # initial training weights\n\n    # Configure\n    init_seeds(1)\n    with open(opt.data) as f:\n        data_dict = yaml.load(f, Loader=yaml.FullLoader)  # model dict\n    train_path = data_dict['train']\n    test_path = data_dict['val']\n    nc = 1 if opt.single_cls else int(data_dict['nc'])  # number of classes\n\n    # Remove previous results\n    for f in glob.glob('*_batch*.jpg') + glob.glob(results_file):\n        os.remove(f)\n\n    # Create model\n    model = Model(opt.cfg).to(device)\n    assert model.md['nc'] == nc, '%s nc=%g classes but %s nc=%g classes' % (opt.data, nc, opt.cfg, model.md['nc'])\n\n    # Image sizes\n    gs = int(max(model.stride))  # grid size (max stride)\n    if any(x % gs != 0 for x in opt.img_size):\n        print('WARNING: --img-size %g,%g must be multiple of %s max stride %g' % (*opt.img_size, opt.cfg, gs))\n    imgsz, imgsz_test = [make_divisible(x, gs) for x in opt.img_size]  # image sizes (train, test)\n\n    # Optimizer\n    nbs = 64  # nominal batch size\n    accumulate = max(round(nbs / batch_size), 1)  # accumulate loss before optimizing\n    hyp['weight_decay'] *= batch_size * accumulate / nbs  # scale weight_decay\n    pg0, pg1, pg2 = [], [], []  # optimizer parameter groups\n    for k, v in model.named_parameters():\n        if v.requires_grad:\n            if '.bias' in k:\n                pg2.append(v)  # biases\n            elif '.weight' in k and '.bn' not in k:\n                pg1.append(v)  # apply weight decay\n            else:\n                pg0.append(v)  # all else\n\n    optimizer = optim.Adam(pg0, lr=hyp['lr0']) if opt.adam else \\n        optim.SGD(pg0, lr=hyp['lr0'], momentum=hyp['momentum'], nesterov=True)\n    optimizer.add_param_group({'params': pg1, 'weight_decay': hyp['weight_decay']})  # add pg1 with weight_decay\n    optimizer.add_param_group({'params': pg2})  # add pg2 (biases)\n    print('Optimizer groups: %g .bias, %g conv.weight, %g other' % (len(pg2), len(pg1), len(pg0)))\n    del pg0, pg1, pg2\n\n    # Load Model\n    google_utils.attempt_download(weights)\n    start_epoch, best_fitness = 0, 0.0\n    if weights.endswith('.pt'):  # pytorch format\n        ckpt = torch.load(weights, map_location=device)  # load checkpoint\n\n        # load model\n        try:\n            ckpt['model'] = \\n                {k: v for k, v in ckpt['model'].state_dict().items() if model.state_dict()[k].numel() == v.numel()}\n            model.load_state_dict(ckpt['model'], strict=False)\n        except KeyError as e:\n            s = '%s is not compatible with %s. Specify --weights '' or specify a --cfg compatible with %s.' \\n                % (opt.weights, opt.cfg, opt.weights)\n            raise KeyError(s) from e\n\n        # load optimizer\n        if ckpt['optimizer'] is not None:\n            optimizer.load_state_dict(ckpt['optimizer'])\n            best_fitness = ckpt['best_fitness']\n\n        # load results\n        if ckpt.get('training_results') is not None:\n            with open(results_file, 'w') as file:\n                file.write(ckpt['training_results'])  # write results.txt\n\n        start_epoch = ckpt['epoch'] + 1\n        del ckpt\n\n    # Mixed precision training https://github.com/NVIDIA/apex\n    if mixed_precision:\n        model, optimizer = amp.initialize(model, optimizer, opt_level='O1', verbosity=0)\n\n    # Scheduler https://arxiv.org/pdf/1812.01187.pdf\n    lf = lambda x: (((1 + math.cos(x * math.pi / epochs)) / 2) ** 1.0) * 0.9 + 0.1  # cosine\n    scheduler = lr_scheduler.LambdaLR(optimizer, lr_lambda=lf)\n    scheduler.last_epoch = start_epoch - 1  # do not move\n    # https://discuss.pytorch.org/t/a-problem-occured-when-resuming-an-optimizer/28822\n    # plot_lr_scheduler(optimizer, scheduler, epochs)\n\n    # Initialize distributed training\n    if device.type != 'cpu' and torch.cuda.device_count() > 1 and torch.distributed.is_available():\n        dist.init_process_group(backend='nccl',  # distributed backend\n                                init_method='tcp://127.0.0.1:9999',  # init method\n                                world_size=1,  # number of nodes\n                                rank=0)  # node rank\n        model = torch.nn.parallel.DistributedDataParallel(model)\n\n    # Dataset\n    dataset = LoadImagesAndLabels(train_path, imgsz, batch_size,\n                                  augment=True,\n                                  hyp=hyp,  # augmentation hyperparameters\n                                  rect=opt.rect,  # rectangular training\n                                  cache_images=opt.cache_images,\n                                  single_cls=opt.single_cls)\n    mlc = np.concatenate(dataset.labels, 0)[:, 0].max()  # max label class\n    assert mlc < nc, 'Label class %g exceeds nc=%g in %s. Correct your labels or your model.' % (mlc, nc, opt.cfg)\n\n    # Dataloader\n    batch_size = min(batch_size, len(dataset))\n    nw = min([os.cpu_count(), batch_size if batch_size > 1 else 0, 8])  # number of workers\n    dataloader = torch.utils.data.DataLoader(dataset,\n                                             batch_size=batch_size,\n                                             num_workers=nw,\n                                             shuffle=not opt.rect,  # Shuffle=True unless rectangular training is used\n                                             pin_memory=True,\n                                             collate_fn=dataset.collate_fn)\n\n    # Testloader\n    testloader = torch.utils.data.DataLoader(LoadImagesAndLabels(test_path, imgsz_test, batch_size,\n                                                                 hyp=hyp,\n                                                                 rect=True,\n                                                                 cache_images=opt.cache_images,\n                                                                 single_cls=opt.single_cls),\n                                             batch_size=batch_size,\n                                             num_workers=nw,\n                                             pin_memory=True,\n                                             collate_fn=dataset.collate_fn)\n\n    # Model parameters\n    hyp['cls'] *= nc / 80.  # scale coco-tuned hyp['cls'] to current dataset\n    model.nc = nc  # attach number of classes to model\n    model.hyp = hyp  # attach hyperparameters to model\n    model.gr = 1.0  # giou loss ratio (obj_loss = 1.0 or giou)\n    model.class_weights = labels_to_class_weights(dataset.labels, nc).to(device)  # attach class weights\n    model.names = data_dict['names']\n\n    # class frequency\n    labels = np.concatenate(dataset.labels, 0)\n    c = torch.tensor(labels[:, 0])  # classes\n    # cf = torch.bincount(c.long(), minlength=nc) + 1.\n    # model._initialize_biases(cf.to(device))\n    # plot_labels(labels)  #<----------------------------close by xujing\n    tb_writer.add_histogram('classes', c, 0)\n\n    # Exponential moving average\n    ema = torch_utils.ModelEMA(model)\n\n    # Start training\n    t0 = time.time()\n    nb = len(dataloader)  # number of batches\n    n_burn = max(3 * nb, 1e3)  # burn-in iterations, max(3 epochs, 1k iterations)\n    maps = np.zeros(nc)  # mAP per class\n    results = (0, 0, 0, 0, 0, 0, 0)  # 'P', 'R', 'mAP', 'F1', 'val GIoU', 'val Objectness', 'val Classification'\n    print('Image sizes %g train, %g test' % (imgsz, imgsz_test))\n    print('Using %g dataloader workers' % nw)\n    print('Starting training for %g epochs...' % epochs)\n    # torch.autograd.set_detect_anomaly(True)\n    for epoch in range(start_epoch, epochs):  # epoch ------------------------------------------------------------------\n        model.train()\n\n        # Update image weights (optional)\n        if dataset.image_weights:\n            w = model.class_weights.cpu().numpy() * (1 - maps) ** 2  # class weights\n            image_weights = labels_to_image_weights(dataset.labels, nc=nc, class_weights=w)\n            dataset.indices = random.choices(range(dataset.n), weights=image_weights, k=dataset.n)  # rand weighted idx\n\n        mloss = torch.zeros(4, device=device)  # mean losses\n        print(('\n' + '%10s' * 8) % ('Epoch', 'gpu_mem', 'GIoU', 'obj', 'cls', 'total', 'targets', 'img_size'))\n        pbar = tqdm(enumerate(dataloader), total=nb)  # progress bar\n        for i, (imgs, targets, paths, _) in pbar:  # batch -------------------------------------------------------------\n            ni = i + nb * epoch  # number integrated batches (since train start)\n            imgs = imgs.to(device).float() / 255.0  # uint8 to float32, 0 - 255 to 0.0 - 1.0\n\n            # Burn-in\n            if ni <= n_burn:\n                xi = [0, n_burn]  # x interp\n                # model.gr = np.interp(ni, xi, [0.0, 1.0])  # giou loss ratio (obj_loss = 1.0 or giou)\n                accumulate = max(1, np.interp(ni, xi, [1, nbs / batch_size]).round())\n                for j, x in enumerate(optimizer.param_groups):\n                    # bias lr falls from 0.1 to lr0, all other lrs rise from 0.0 to lr0\n                    x['lr'] = np.interp(ni, xi, [0.1 if j == 2 else 0.0, x['initial_lr'] * lf(epoch)])\n                    if 'momentum' in x:\n                        x['momentum'] = np.interp(ni, xi, [0.9, hyp['momentum']])\n\n            # Multi-scale\n            if opt.multi_scale:\n                sz = random.randrange(imgsz * 0.5, imgsz * 1.5 + gs) // gs * gs  # size\n                sf = sz / max(imgs.shape[2:])  # scale factor\n                if sf != 1:\n                    ns = [math.ceil(x * sf / gs) * gs for x in imgs.shape[2:]]  # new shape (stretched to gs-multiple)\n                    imgs = F.interpolate(imgs, size=ns, mode='bilinear', align_corners=False)\n\n            # Forward\n            pred = model(imgs)\n\n            # Loss\n            loss, loss_items = compute_loss(pred, targets.to(device), model)\n            if not torch.isfinite(loss):\n                print('WARNING: non-finite loss, ending training ', loss_items)\n                return results\n\n            # Backward\n            if mixed_precision:\n                with amp.scale_loss(loss, optimizer) as scaled_loss:\n                    scaled_loss.backward()\n            else:\n                loss.backward()\n\n            # Optimize\n            if ni % accumulate == 0:\n                optimizer.step()\n                optimizer.zero_grad()\n                ema.update(model)\n\n            # Print\n            mloss = (mloss * i + loss_items) / (i + 1)  # update mean losses\n            mem = '%.3gG' % (torch.cuda.memory_cached() / 1E9 if torch.cuda.is_available() else 0)  # (GB)\n            s = ('%10s' * 2 + '%10.4g' * 6) % (\n                '%g/%g' % (epoch, epochs - 1), mem, *mloss, targets.shape[0], imgs.shape[-1])\n            pbar.set_description(s)\n\n            # Plot\n            if ni < 3:\n                f = 'train_batch%g.jpg' % i  # filename\n                res = plot_images(images=imgs, targets=targets, paths=paths, fname=f)\n                if tb_writer:\n                    tb_writer.add_image(f, res, dataformats='HWC', global_step=epoch)\n                    # tb_writer.add_graph(model, imgs)  # add model to tensorboard\n\n            # end batch ------------------------------------------------------------------------------------------------\n\n        # Scheduler\n        scheduler.step()\n\n        # mAP\n        ema.update_attr(model)\n        final_epoch = epoch + 1 == epochs\n        if not opt.notest or final_epoch:  # Calculate mAP\n            results, maps, times = test.test(opt.data,\n                                             batch_size=batch_size,\n                                             imgsz=imgsz_test,\n                                             save_json=final_epoch and opt.data.endswith(os.sep + 'coco.yaml'),\n                                             model=ema.ema,\n                                             single_cls=opt.single_cls,\n                                             dataloader=testloader,\n                                             fast=ni < n_burn)\n\n        # Write\n        with open(results_file, 'a') as f:\n            f.write(s + '%10.4g' * 7 % results + '\n')  # P, R, mAP, F1, test_losses=(GIoU, obj, cls)\n        if len(opt.name) and opt.bucket:\n            os.system('gsutil cp results.txt gs://%s/results/results%s.txt' % (opt.bucket, opt.name))\n\n        # Tensorboard\n        if tb_writer:\n            tags = ['train/giou_loss', 'train/obj_loss', 'train/cls_loss',\n                    'metrics/precision', 'metrics/recall', 'metrics/mAP_0.5', 'metrics/F1',\n                    'val/giou_loss', 'val/obj_loss', 'val/cls_loss']\n            for x, tag in zip(list(mloss[:-1]) + list(results), tags):\n                tb_writer.add_scalar(tag, x, epoch)\n\n        # Update best mAP\n        fi = fitness(np.array(results).reshape(1, -1))  # fitness_i = weighted combination of [P, R, mAP, F1]\n        if fi > best_fitness:\n            best_fitness = fi\n\n        # Save model\n        save = (not opt.nosave) or (final_epoch and not opt.evolve)\n        if save:\n            with open(results_file, 'r') as f:  # create checkpoint\n                ckpt = {'epoch': epoch,\n                        'best_fitness': best_fitness,\n                        'training_results': f.read(),\n                        'model': ema.ema.module if hasattr(model, 'module') else ema.ema,\n                        'optimizer': None if final_epoch else optimizer.state_dict()}\n\n            # Save last, best and delete\n            torch.save(ckpt, last)\n            if (best_fitness == fi) and not final_epoch:\n                torch.save(ckpt, best)\n            del ckpt\n\n        # end epoch ----------------------------------------------------------------------------------------------------\n    # end training\n\n    n = opt.name\n    if len(n):\n        n = '_' + n if not n.isnumeric() else n\n        fresults, flast, fbest = 'results%s.txt' % n, wdir + 'last%s.pt' % n, wdir + 'best%s.pt' % n\n        for f1, f2 in zip([wdir + 'last.pt', wdir + 'best.pt', 'results.txt'], [flast, fbest, fresults]):\n            if os.path.exists(f1):\n                os.rename(f1, f2)  # rename\n                ispt = f2.endswith('.pt')  # is *.pt\n                strip_optimizer(f2) if ispt else None  # strip optimizer\n                os.system('gsutil cp %s gs://%s/weights' % (f2, opt.bucket)) if opt.bucket and ispt else None  # upload\n\n    if not opt.evolve:\n        # plot_results()  # save as results.png\n        pass\n    print('%g epochs completed in %.3f hours.\n' % (epoch - start_epoch + 1, (time.time() - t0) / 3600))\n    dist.destroy_process_group() if torch.cuda.device_count() > 1 else None\n    torch.cuda.empty_cache()\n    return results,type='function_definition'\nline_star:59,line_end:360|char_star:0,char_end:18"->"type='INFORMATION BLOCK'\nline_star:60,line_end:360|char_star:4,char_end:18";
"# 300,type='comment'\nline_star:60,line_end:60|char_star:25,char_end:30"[shape="box",fillcolor="#f0c929",style=filled];
"type='INFORMATION BLOCK'\nline_star:60,line_end:360|char_star:4,char_end:18"->"# 300,type='comment'\nline_star:60,line_end:60|char_star:25,char_end:30";
"# 64,type='comment'\nline_star:61,line_end:61|char_star:33,char_end:37"[shape="box",fillcolor="#f0c929",style=filled];
"type='INFORMATION BLOCK'\nline_star:60,line_end:360|char_star:4,char_end:18"->"# 64,type='comment'\nline_star:61,line_end:61|char_star:33,char_end:37";
"# initial training weights,type='comment'\nline_star:62,line_end:62|char_star:27,char_end:53"[shape="box",fillcolor="#f0c929",style=filled];
"type='INFORMATION BLOCK'\nline_star:60,line_end:360|char_star:4,char_end:18"->"# initial training weights,type='comment'\nline_star:62,line_end:62|char_star:27,char_end:53";
"# Configure,type='comment'\nline_star:64,line_end:64|char_star:4,char_end:15"[shape="box",fillcolor="#f0c929",style=filled];
"type='INFORMATION BLOCK'\nline_star:60,line_end:360|char_star:4,char_end:18"->"# Configure,type='comment'\nline_star:64,line_end:64|char_star:4,char_end:15";
"with open(opt.data) as f:\n        data_dict = yaml.load(f, Loader=yaml.FullLoader)  # model dict,type='with_statement'\nline_star:66,line_end:67|char_star:4,char_end:70"[shape="box",fillcolor="white",style=filled];
"type='INFORMATION BLOCK'\nline_star:60,line_end:360|char_star:4,char_end:18"->"with open(opt.data) as f:\n        data_dict = yaml.load(f, Loader=yaml.FullLoader)  # model dict,type='with_statement'\nline_star:66,line_end:67|char_star:4,char_end:70";
"open(opt.data) as f,type='with_clause'\nline_star:66,line_end:66|char_star:9,char_end:28"[shape="box",fillcolor="white",style=filled];
"with open(opt.data) as f:\n        data_dict = yaml.load(f, Loader=yaml.FullLoader)  # model dict,type='with_statement'\nline_star:66,line_end:67|char_star:4,char_end:70"->"open(opt.data) as f,type='with_clause'\nline_star:66,line_end:66|char_star:9,char_end:28";
"type='INFORMATION BLOCK'\nline_star:67,line_end:67|char_star:8,char_end:70"[shape="point",fillcolor="#121013",style=filled];
"with open(opt.data) as f:\n        data_dict = yaml.load(f, Loader=yaml.FullLoader)  # model dict,type='with_statement'\nline_star:66,line_end:67|char_star:4,char_end:70"->"type='INFORMATION BLOCK'\nline_star:67,line_end:67|char_star:8,char_end:70";
"# model dict,type='comment'\nline_star:67,line_end:67|char_star:58,char_end:70"[shape="box",fillcolor="#f0c929",style=filled];
"type='INFORMATION BLOCK'\nline_star:67,line_end:67|char_star:8,char_end:70"->"# model dict,type='comment'\nline_star:67,line_end:67|char_star:58,char_end:70";
"# number of classes,type='comment'\nline_star:70,line_end:70|char_star:56,char_end:75"[shape="box",fillcolor="#f0c929",style=filled];
"type='INFORMATION BLOCK'\nline_star:60,line_end:360|char_star:4,char_end:18"->"# number of classes,type='comment'\nline_star:70,line_end:70|char_star:56,char_end:75";
"# Remove previous results,type='comment'\nline_star:72,line_end:72|char_star:4,char_end:29"[shape="box",fillcolor="#f0c929",style=filled];
"type='INFORMATION BLOCK'\nline_star:60,line_end:360|char_star:4,char_end:18"->"# Remove previous results,type='comment'\nline_star:72,line_end:72|char_star:4,char_end:29";
"for f in glob.glob('*_batch*.jpg') + glob.glob(results_file):\n        os.remove(f),type='for_statement'\nline_star:73,line_end:74|char_star:4,char_end:20"[shape="box",fillcolor="white",style=filled];
"type='INFORMATION BLOCK'\nline_star:60,line_end:360|char_star:4,char_end:18"->"for f in glob.glob('*_batch*.jpg') + glob.glob(results_file):\n        os.remove(f),type='for_statement'\nline_star:73,line_end:74|char_star:4,char_end:20";
"# Create model,type='comment'\nline_star:76,line_end:76|char_star:4,char_end:18"[shape="box",fillcolor="#f0c929",style=filled];
"type='INFORMATION BLOCK'\nline_star:60,line_end:360|char_star:4,char_end:18"->"# Create model,type='comment'\nline_star:76,line_end:76|char_star:4,char_end:18";
"assert model.md['nc'] == nc, '%s nc=%g classes but %s nc=%g classes' % (opt.data, nc, opt.cfg, model.md['nc']),type='assert_statement'\nline_star:78,line_end:78|char_star:4,char_end:114"[shape="box",fillcolor="white",style=filled];
"type='INFORMATION BLOCK'\nline_star:60,line_end:360|char_star:4,char_end:18"->"assert model.md['nc'] == nc, '%s nc=%g classes but %s nc=%g classes' % (opt.data, nc, opt.cfg, model.md['nc']),type='assert_statement'\nline_star:78,line_end:78|char_star:4,char_end:114";
"model.md['nc'] == nc,type='comparison_operator'\nline_star:78,line_end:78|char_star:11,char_end:31"[shape="box",fillcolor="white",style=filled];
"assert model.md['nc'] == nc, '%s nc=%g classes but %s nc=%g classes' % (opt.data, nc, opt.cfg, model.md['nc']),type='assert_statement'\nline_star:78,line_end:78|char_star:4,char_end:114"->"model.md['nc'] == nc,type='comparison_operator'\nline_star:78,line_end:78|char_star:11,char_end:31";
"model.md['nc'],type='subscript'\nline_star:78,line_end:78|char_star:11,char_end:25"[shape="box",fillcolor="white",style=filled];
"model.md['nc'] == nc,type='comparison_operator'\nline_star:78,line_end:78|char_star:11,char_end:31"->"model.md['nc'],type='subscript'\nline_star:78,line_end:78|char_star:11,char_end:25";
"model.md,type='attribute'\nline_star:78,line_end:78|char_star:11,char_end:19"[shape="box",fillcolor="white",style=filled];
"model.md['nc'],type='subscript'\nline_star:78,line_end:78|char_star:11,char_end:25"->"model.md,type='attribute'\nline_star:78,line_end:78|char_star:11,char_end:19";
"model,type='identifier'\nline_star:78,line_end:78|char_star:11,char_end:16"[shape="point",fillcolor="#121013",style=filled];
"model.md,type='attribute'\nline_star:78,line_end:78|char_star:11,char_end:19"->"model,type='identifier'\nline_star:78,line_end:78|char_star:11,char_end:16";
"md,type='identifier'\nline_star:78,line_end:78|char_star:17,char_end:19"[shape="point",fillcolor="#121013",style=filled];
"model.md,type='attribute'\nline_star:78,line_end:78|char_star:11,char_end:19"->"md,type='identifier'\nline_star:78,line_end:78|char_star:17,char_end:19";
"nc,type='identifier'\nline_star:78,line_end:78|char_star:29,char_end:31"[shape="point",fillcolor="#121013",style=filled];
"model.md['nc'] == nc,type='comparison_operator'\nline_star:78,line_end:78|char_star:11,char_end:31"->"nc,type='identifier'\nline_star:78,line_end:78|char_star:29,char_end:31";
"'%s nc=%g classes but %s nc=%g classes' % (opt.data, nc, opt.cfg, model.md['nc']),type='binary_operator'\nline_star:78,line_end:78|char_star:33,char_end:114"[shape="box",fillcolor="white",style=filled];
"assert model.md['nc'] == nc, '%s nc=%g classes but %s nc=%g classes' % (opt.data, nc, opt.cfg, model.md['nc']),type='assert_statement'\nline_star:78,line_end:78|char_star:4,char_end:114"->"'%s nc=%g classes but %s nc=%g classes' % (opt.data, nc, opt.cfg, model.md['nc']),type='binary_operator'\nline_star:78,line_end:78|char_star:33,char_end:114";
"%,type='%'\nline_star:78,line_end:78|char_star:73,char_end:74"[shape="box",fillcolor="white",style=filled];
"'%s nc=%g classes but %s nc=%g classes' % (opt.data, nc, opt.cfg, model.md['nc']),type='binary_operator'\nline_star:78,line_end:78|char_star:33,char_end:114"->"%,type='%'\nline_star:78,line_end:78|char_star:73,char_end:74";
"(opt.data, nc, opt.cfg, model.md['nc']),type='tuple'\nline_star:78,line_end:78|char_star:75,char_end:114"[shape="box",fillcolor="white",style=filled];
"'%s nc=%g classes but %s nc=%g classes' % (opt.data, nc, opt.cfg, model.md['nc']),type='binary_operator'\nline_star:78,line_end:78|char_star:33,char_end:114"->"(opt.data, nc, opt.cfg, model.md['nc']),type='tuple'\nline_star:78,line_end:78|char_star:75,char_end:114";
"opt.data,type='attribute'\nline_star:78,line_end:78|char_star:76,char_end:84"[shape="box",fillcolor="white",style=filled];
"(opt.data, nc, opt.cfg, model.md['nc']),type='tuple'\nline_star:78,line_end:78|char_star:75,char_end:114"->"opt.data,type='attribute'\nline_star:78,line_end:78|char_star:76,char_end:84";
"opt,type='identifier'\nline_star:78,line_end:78|char_star:76,char_end:79"[shape="point",fillcolor="#121013",style=filled];
"opt.data,type='attribute'\nline_star:78,line_end:78|char_star:76,char_end:84"->"opt,type='identifier'\nline_star:78,line_end:78|char_star:76,char_end:79";
"data,type='identifier'\nline_star:78,line_end:78|char_star:80,char_end:84"[shape="point",fillcolor="#121013",style=filled];
"opt.data,type='attribute'\nline_star:78,line_end:78|char_star:76,char_end:84"->"data,type='identifier'\nline_star:78,line_end:78|char_star:80,char_end:84";
"nc,type='identifier'\nline_star:78,line_end:78|char_star:86,char_end:88"[shape="point",fillcolor="#121013",style=filled];
"(opt.data, nc, opt.cfg, model.md['nc']),type='tuple'\nline_star:78,line_end:78|char_star:75,char_end:114"->"nc,type='identifier'\nline_star:78,line_end:78|char_star:86,char_end:88";
"opt.cfg,type='attribute'\nline_star:78,line_end:78|char_star:90,char_end:97"[shape="box",fillcolor="white",style=filled];
"(opt.data, nc, opt.cfg, model.md['nc']),type='tuple'\nline_star:78,line_end:78|char_star:75,char_end:114"->"opt.cfg,type='attribute'\nline_star:78,line_end:78|char_star:90,char_end:97";
"opt,type='identifier'\nline_star:78,line_end:78|char_star:90,char_end:93"[shape="point",fillcolor="#121013",style=filled];
"opt.cfg,type='attribute'\nline_star:78,line_end:78|char_star:90,char_end:97"->"opt,type='identifier'\nline_star:78,line_end:78|char_star:90,char_end:93";
"cfg,type='identifier'\nline_star:78,line_end:78|char_star:94,char_end:97"[shape="point",fillcolor="#121013",style=filled];
"opt.cfg,type='attribute'\nline_star:78,line_end:78|char_star:90,char_end:97"->"cfg,type='identifier'\nline_star:78,line_end:78|char_star:94,char_end:97";
"model.md['nc'],type='subscript'\nline_star:78,line_end:78|char_star:99,char_end:113"[shape="box",fillcolor="white",style=filled];
"(opt.data, nc, opt.cfg, model.md['nc']),type='tuple'\nline_star:78,line_end:78|char_star:75,char_end:114"->"model.md['nc'],type='subscript'\nline_star:78,line_end:78|char_star:99,char_end:113";
"model.md,type='attribute'\nline_star:78,line_end:78|char_star:99,char_end:107"[shape="box",fillcolor="white",style=filled];
"model.md['nc'],type='subscript'\nline_star:78,line_end:78|char_star:99,char_end:113"->"model.md,type='attribute'\nline_star:78,line_end:78|char_star:99,char_end:107";
"model,type='identifier'\nline_star:78,line_end:78|char_star:99,char_end:104"[shape="point",fillcolor="#121013",style=filled];
"model.md,type='attribute'\nline_star:78,line_end:78|char_star:99,char_end:107"->"model,type='identifier'\nline_star:78,line_end:78|char_star:99,char_end:104";
"md,type='identifier'\nline_star:78,line_end:78|char_star:105,char_end:107"[shape="point",fillcolor="#121013",style=filled];
"model.md,type='attribute'\nline_star:78,line_end:78|char_star:99,char_end:107"->"md,type='identifier'\nline_star:78,line_end:78|char_star:105,char_end:107";
"# Image sizes,type='comment'\nline_star:80,line_end:80|char_star:4,char_end:17"[shape="box",fillcolor="#f0c929",style=filled];
"type='INFORMATION BLOCK'\nline_star:60,line_end:360|char_star:4,char_end:18"->"# Image sizes,type='comment'\nline_star:80,line_end:80|char_star:4,char_end:17";
"# grid size (max stride),type='comment'\nline_star:81,line_end:81|char_star:33,char_end:57"[shape="box",fillcolor="#f0c929",style=filled];
"type='INFORMATION BLOCK'\nline_star:60,line_end:360|char_star:4,char_end:18"->"# grid size (max stride),type='comment'\nline_star:81,line_end:81|char_star:33,char_end:57";
"if any(x % gs != 0 for x in opt.img_size):\n        print('WARNING: --img-size %g,%g must be multiple of %s max stride %g' % (*opt.img_size, opt.cfg, gs)),type='if_statement'\nline_star:82,line_end:83|char_star:4,char_end:110"[shape="box",fillcolor="#9ecca4",style=filled];
"type='INFORMATION BLOCK'\nline_star:60,line_end:360|char_star:4,char_end:18"->"if any(x % gs != 0 for x in opt.img_size):\n        print('WARNING: --img-size %g,%g must be multiple of %s max stride %g' % (*opt.img_size, opt.cfg, gs)),type='if_statement'\nline_star:82,line_end:83|char_star:4,char_end:110";
"# image sizes (train, test),type='comment'\nline_star:84,line_end:84|char_star:71,char_end:98"[shape="box",fillcolor="#f0c929",style=filled];
"type='INFORMATION BLOCK'\nline_star:60,line_end:360|char_star:4,char_end:18"->"# image sizes (train, test),type='comment'\nline_star:84,line_end:84|char_star:71,char_end:98";
"# Optimizer,type='comment'\nline_star:86,line_end:86|char_star:4,char_end:15"[shape="box",fillcolor="#f0c929",style=filled];
"type='INFORMATION BLOCK'\nline_star:60,line_end:360|char_star:4,char_end:18"->"# Optimizer,type='comment'\nline_star:86,line_end:86|char_star:4,char_end:15";
"# nominal batch size,type='comment'\nline_star:87,line_end:87|char_star:14,char_end:34"[shape="box",fillcolor="#f0c929",style=filled];
"type='INFORMATION BLOCK'\nline_star:60,line_end:360|char_star:4,char_end:18"->"# nominal batch size,type='comment'\nline_star:87,line_end:87|char_star:14,char_end:34";
"# accumulate loss before optimizing,type='comment'\nline_star:88,line_end:88|char_star:50,char_end:85"[shape="box",fillcolor="#f0c929",style=filled];
"type='INFORMATION BLOCK'\nline_star:60,line_end:360|char_star:4,char_end:18"->"# accumulate loss before optimizing,type='comment'\nline_star:88,line_end:88|char_star:50,char_end:85";
"# scale weight_decay,type='comment'\nline_star:89,line_end:89|char_star:58,char_end:78"[shape="box",fillcolor="#f0c929",style=filled];
"type='INFORMATION BLOCK'\nline_star:60,line_end:360|char_star:4,char_end:18"->"# scale weight_decay,type='comment'\nline_star:89,line_end:89|char_star:58,char_end:78";
"# optimizer parameter groups,type='comment'\nline_star:90,line_end:90|char_star:32,char_end:60"[shape="box",fillcolor="#f0c929",style=filled];
"type='INFORMATION BLOCK'\nline_star:60,line_end:360|char_star:4,char_end:18"->"# optimizer parameter groups,type='comment'\nline_star:90,line_end:90|char_star:32,char_end:60";
"for k, v in model.named_parameters():\n        if v.requires_grad:\n            if '.bias' in k:\n                pg2.append(v)  # biases\n            elif '.weight' in k and '.bn' not in k:\n                pg1.append(v)  # apply weight decay\n            else:\n                pg0.append(v),type='for_statement'\nline_star:91,line_end:98|char_star:4,char_end:29"[shape="box",fillcolor="white",style=filled];
"type='INFORMATION BLOCK'\nline_star:60,line_end:360|char_star:4,char_end:18"->"for k, v in model.named_parameters():\n        if v.requires_grad:\n            if '.bias' in k:\n                pg2.append(v)  # biases\n            elif '.weight' in k and '.bn' not in k:\n                pg1.append(v)  # apply weight decay\n            else:\n                pg0.append(v),type='for_statement'\nline_star:91,line_end:98|char_star:4,char_end:29";
"# all else,type='comment'\nline_star:98,line_end:98|char_star:31,char_end:41"[shape="box",fillcolor="#f0c929",style=filled];
"type='INFORMATION BLOCK'\nline_star:60,line_end:360|char_star:4,char_end:18"->"# all else,type='comment'\nline_star:98,line_end:98|char_star:31,char_end:41";
"# add pg1 with weight_decay,type='comment'\nline_star:102,line_end:102|char_star:85,char_end:112"[shape="box",fillcolor="#f0c929",style=filled];
"type='INFORMATION BLOCK'\nline_star:60,line_end:360|char_star:4,char_end:18"->"# add pg1 with weight_decay,type='comment'\nline_star:102,line_end:102|char_star:85,char_end:112";
"# add pg2 (biases),type='comment'\nline_star:103,line_end:103|char_star:48,char_end:66"[shape="box",fillcolor="#f0c929",style=filled];
"type='INFORMATION BLOCK'\nline_star:60,line_end:360|char_star:4,char_end:18"->"# add pg2 (biases),type='comment'\nline_star:103,line_end:103|char_star:48,char_end:66";
"del pg0, pg1, pg2,type='delete_statement'\nline_star:105,line_end:105|char_star:4,char_end:21"[shape="box",fillcolor="white",style=filled];
"type='INFORMATION BLOCK'\nline_star:60,line_end:360|char_star:4,char_end:18"->"del pg0, pg1, pg2,type='delete_statement'\nline_star:105,line_end:105|char_star:4,char_end:21";
"del,type='del'\nline_star:105,line_end:105|char_star:4,char_end:7"[shape="box",fillcolor="white",style=filled];
"del pg0, pg1, pg2,type='delete_statement'\nline_star:105,line_end:105|char_star:4,char_end:21"->"del,type='del'\nline_star:105,line_end:105|char_star:4,char_end:7";
"pg0, pg1, pg2,type='expression_list'\nline_star:105,line_end:105|char_star:8,char_end:21"[shape="box",fillcolor="white",style=filled];
"del pg0, pg1, pg2,type='delete_statement'\nline_star:105,line_end:105|char_star:4,char_end:21"->"pg0, pg1, pg2,type='expression_list'\nline_star:105,line_end:105|char_star:8,char_end:21";
"pg0,type='identifier'\nline_star:105,line_end:105|char_star:8,char_end:11"[shape="point",fillcolor="#121013",style=filled];
"pg0, pg1, pg2,type='expression_list'\nline_star:105,line_end:105|char_star:8,char_end:21"->"pg0,type='identifier'\nline_star:105,line_end:105|char_star:8,char_end:11";
"pg1,type='identifier'\nline_star:105,line_end:105|char_star:13,char_end:16"[shape="point",fillcolor="#121013",style=filled];
"pg0, pg1, pg2,type='expression_list'\nline_star:105,line_end:105|char_star:8,char_end:21"->"pg1,type='identifier'\nline_star:105,line_end:105|char_star:13,char_end:16";
"pg2,type='identifier'\nline_star:105,line_end:105|char_star:18,char_end:21"[shape="point",fillcolor="#121013",style=filled];
"pg0, pg1, pg2,type='expression_list'\nline_star:105,line_end:105|char_star:8,char_end:21"->"pg2,type='identifier'\nline_star:105,line_end:105|char_star:18,char_end:21";
"# Load Model,type='comment'\nline_star:107,line_end:107|char_star:4,char_end:16"[shape="box",fillcolor="#f0c929",style=filled];
"type='INFORMATION BLOCK'\nline_star:60,line_end:360|char_star:4,char_end:18"->"# Load Model,type='comment'\nline_star:107,line_end:107|char_star:4,char_end:16";
"if weights.endswith('.pt'):  # pytorch format\n        ckpt = torch.load(weights, map_location=device)  # load checkpoint\n\n        # load model\n        try:\n            ckpt['model'] = \\n                {k: v for k, v in ckpt['model'].state_dict().items() if model.state_dict()[k].numel() == v.numel()}\n            model.load_state_dict(ckpt['model'], strict=False)\n        except KeyError as e:\n            s = '%s is not compatible with %s. Specify --weights '' or specify a --cfg compatible with %s.' \\n                % (opt.weights, opt.cfg, opt.weights)\n            raise KeyError(s) from e\n\n        # load optimizer\n        if ckpt['optimizer'] is not None:\n            optimizer.load_state_dict(ckpt['optimizer'])\n            best_fitness = ckpt['best_fitness']\n\n        # load results\n        if ckpt.get('training_results') is not None:\n            with open(results_file, 'w') as file:\n                file.write(ckpt['training_results'])  # write results.txt\n\n        start_epoch = ckpt['epoch'] + 1\n        del ckpt,type='if_statement'\nline_star:110,line_end:134|char_star:4,char_end:16"[shape="box",fillcolor="#9ecca4",style=filled];
"type='INFORMATION BLOCK'\nline_star:60,line_end:360|char_star:4,char_end:18"->"if weights.endswith('.pt'):  # pytorch format\n        ckpt = torch.load(weights, map_location=device)  # load checkpoint\n\n        # load model\n        try:\n            ckpt['model'] = \\n                {k: v for k, v in ckpt['model'].state_dict().items() if model.state_dict()[k].numel() == v.numel()}\n            model.load_state_dict(ckpt['model'], strict=False)\n        except KeyError as e:\n            s = '%s is not compatible with %s. Specify --weights '' or specify a --cfg compatible with %s.' \\n                % (opt.weights, opt.cfg, opt.weights)\n            raise KeyError(s) from e\n\n        # load optimizer\n        if ckpt['optimizer'] is not None:\n            optimizer.load_state_dict(ckpt['optimizer'])\n            best_fitness = ckpt['best_fitness']\n\n        # load results\n        if ckpt.get('training_results') is not None:\n            with open(results_file, 'w') as file:\n                file.write(ckpt['training_results'])  # write results.txt\n\n        start_epoch = ckpt['epoch'] + 1\n        del ckpt,type='if_statement'\nline_star:110,line_end:134|char_star:4,char_end:16";
"# Mixed precision training https://github.com/NVIDIA/apex,type='comment'\nline_star:136,line_end:136|char_star:4,char_end:61"[shape="box",fillcolor="#f0c929",style=filled];
"type='INFORMATION BLOCK'\nline_star:60,line_end:360|char_star:4,char_end:18"->"# Mixed precision training https://github.com/NVIDIA/apex,type='comment'\nline_star:136,line_end:136|char_star:4,char_end:61";
"if mixed_precision:\n        model, optimizer = amp.initialize(model, optimizer, opt_level='O1', verbosity=0),type='if_statement'\nline_star:137,line_end:138|char_star:4,char_end:88"[shape="box",fillcolor="#9ecca4",style=filled];
"type='INFORMATION BLOCK'\nline_star:60,line_end:360|char_star:4,char_end:18"->"if mixed_precision:\n        model, optimizer = amp.initialize(model, optimizer, opt_level='O1', verbosity=0),type='if_statement'\nline_star:137,line_end:138|char_star:4,char_end:88";
"# Scheduler https://arxiv.org/pdf/1812.01187.pdf,type='comment'\nline_star:140,line_end:140|char_star:4,char_end:52"[shape="box",fillcolor="#f0c929",style=filled];
"type='INFORMATION BLOCK'\nline_star:60,line_end:360|char_star:4,char_end:18"->"# Scheduler https://arxiv.org/pdf/1812.01187.pdf,type='comment'\nline_star:140,line_end:140|char_star:4,char_end:52";
"# cosine,type='comment'\nline_star:141,line_end:141|char_star:84,char_end:92"[shape="box",fillcolor="#f0c929",style=filled];
"type='INFORMATION BLOCK'\nline_star:60,line_end:360|char_star:4,char_end:18"->"# cosine,type='comment'\nline_star:141,line_end:141|char_star:84,char_end:92";
"# do not move,type='comment'\nline_star:143,line_end:143|char_star:44,char_end:57"[shape="box",fillcolor="#f0c929",style=filled];
"type='INFORMATION BLOCK'\nline_star:60,line_end:360|char_star:4,char_end:18"->"# do not move,type='comment'\nline_star:143,line_end:143|char_star:44,char_end:57";
"# https://discuss.pytorch.org/t/a-problem-occured-when-resuming-an-optimizer/28822,type='comment'\nline_star:144,line_end:144|char_star:4,char_end:86"[shape="box",fillcolor="#f0c929",style=filled];
"type='INFORMATION BLOCK'\nline_star:60,line_end:360|char_star:4,char_end:18"->"# https://discuss.pytorch.org/t/a-problem-occured-when-resuming-an-optimizer/28822,type='comment'\nline_star:144,line_end:144|char_star:4,char_end:86";
"# plot_lr_scheduler(optimizer, scheduler, epochs),type='comment'\nline_star:145,line_end:145|char_star:4,char_end:53"[shape="box",fillcolor="#f0c929",style=filled];
"type='INFORMATION BLOCK'\nline_star:60,line_end:360|char_star:4,char_end:18"->"# plot_lr_scheduler(optimizer, scheduler, epochs),type='comment'\nline_star:145,line_end:145|char_star:4,char_end:53";
"# Initialize distributed training,type='comment'\nline_star:147,line_end:147|char_star:4,char_end:37"[shape="box",fillcolor="#f0c929",style=filled];
"type='INFORMATION BLOCK'\nline_star:60,line_end:360|char_star:4,char_end:18"->"# Initialize distributed training,type='comment'\nline_star:147,line_end:147|char_star:4,char_end:37";
"if device.type != 'cpu' and torch.cuda.device_count() > 1 and torch.distributed.is_available():\n        dist.init_process_group(backend='nccl',  # distributed backend\n                                init_method='tcp://127.0.0.1:9999',  # init method\n                                world_size=1,  # number of nodes\n                                rank=0)  # node rank\n        model = torch.nn.parallel.DistributedDataParallel(model),type='if_statement'\nline_star:148,line_end:153|char_star:4,char_end:64"[shape="box",fillcolor="#9ecca4",style=filled];
"type='INFORMATION BLOCK'\nline_star:60,line_end:360|char_star:4,char_end:18"->"if device.type != 'cpu' and torch.cuda.device_count() > 1 and torch.distributed.is_available():\n        dist.init_process_group(backend='nccl',  # distributed backend\n                                init_method='tcp://127.0.0.1:9999',  # init method\n                                world_size=1,  # number of nodes\n                                rank=0)  # node rank\n        model = torch.nn.parallel.DistributedDataParallel(model),type='if_statement'\nline_star:148,line_end:153|char_star:4,char_end:64";
"# Dataset,type='comment'\nline_star:155,line_end:155|char_star:4,char_end:13"[shape="box",fillcolor="#f0c929",style=filled];
"type='INFORMATION BLOCK'\nline_star:60,line_end:360|char_star:4,char_end:18"->"# Dataset,type='comment'\nline_star:155,line_end:155|char_star:4,char_end:13";
"# max label class,type='comment'\nline_star:162,line_end:162|char_star:57,char_end:74"[shape="box",fillcolor="#f0c929",style=filled];
"type='INFORMATION BLOCK'\nline_star:60,line_end:360|char_star:4,char_end:18"->"# max label class,type='comment'\nline_star:162,line_end:162|char_star:57,char_end:74";
"assert mlc < nc, 'Label class %g exceeds nc=%g in %s. Correct your labels or your model.' % (mlc, nc, opt.cfg),type='assert_statement'\nline_star:163,line_end:163|char_star:4,char_end:114"[shape="box",fillcolor="white",style=filled];
"type='INFORMATION BLOCK'\nline_star:60,line_end:360|char_star:4,char_end:18"->"assert mlc < nc, 'Label class %g exceeds nc=%g in %s. Correct your labels or your model.' % (mlc, nc, opt.cfg),type='assert_statement'\nline_star:163,line_end:163|char_star:4,char_end:114";
"mlc < nc,type='comparison_operator'\nline_star:163,line_end:163|char_star:11,char_end:19"[shape="box",fillcolor="white",style=filled];
"assert mlc < nc, 'Label class %g exceeds nc=%g in %s. Correct your labels or your model.' % (mlc, nc, opt.cfg),type='assert_statement'\nline_star:163,line_end:163|char_star:4,char_end:114"->"mlc < nc,type='comparison_operator'\nline_star:163,line_end:163|char_star:11,char_end:19";
"mlc,type='identifier'\nline_star:163,line_end:163|char_star:11,char_end:14"[shape="point",fillcolor="#121013",style=filled];
"mlc < nc,type='comparison_operator'\nline_star:163,line_end:163|char_star:11,char_end:19"->"mlc,type='identifier'\nline_star:163,line_end:163|char_star:11,char_end:14";
"<,type='<'\nline_star:163,line_end:163|char_star:15,char_end:16"[shape="box",fillcolor="white",style=filled];
"mlc < nc,type='comparison_operator'\nline_star:163,line_end:163|char_star:11,char_end:19"->"<,type='<'\nline_star:163,line_end:163|char_star:15,char_end:16";
"nc,type='identifier'\nline_star:163,line_end:163|char_star:17,char_end:19"[shape="point",fillcolor="#121013",style=filled];
"mlc < nc,type='comparison_operator'\nline_star:163,line_end:163|char_star:11,char_end:19"->"nc,type='identifier'\nline_star:163,line_end:163|char_star:17,char_end:19";
"'Label class %g exceeds nc=%g in %s. Correct your labels or your model.' % (mlc, nc, opt.cfg),type='binary_operator'\nline_star:163,line_end:163|char_star:21,char_end:114"[shape="box",fillcolor="white",style=filled];
"assert mlc < nc, 'Label class %g exceeds nc=%g in %s. Correct your labels or your model.' % (mlc, nc, opt.cfg),type='assert_statement'\nline_star:163,line_end:163|char_star:4,char_end:114"->"'Label class %g exceeds nc=%g in %s. Correct your labels or your model.' % (mlc, nc, opt.cfg),type='binary_operator'\nline_star:163,line_end:163|char_star:21,char_end:114";
"%,type='%'\nline_star:163,line_end:163|char_star:94,char_end:95"[shape="box",fillcolor="white",style=filled];
"'Label class %g exceeds nc=%g in %s. Correct your labels or your model.' % (mlc, nc, opt.cfg),type='binary_operator'\nline_star:163,line_end:163|char_star:21,char_end:114"->"%,type='%'\nline_star:163,line_end:163|char_star:94,char_end:95";
"(mlc, nc, opt.cfg),type='tuple'\nline_star:163,line_end:163|char_star:96,char_end:114"[shape="box",fillcolor="white",style=filled];
"'Label class %g exceeds nc=%g in %s. Correct your labels or your model.' % (mlc, nc, opt.cfg),type='binary_operator'\nline_star:163,line_end:163|char_star:21,char_end:114"->"(mlc, nc, opt.cfg),type='tuple'\nline_star:163,line_end:163|char_star:96,char_end:114";
"mlc,type='identifier'\nline_star:163,line_end:163|char_star:97,char_end:100"[shape="point",fillcolor="#121013",style=filled];
"(mlc, nc, opt.cfg),type='tuple'\nline_star:163,line_end:163|char_star:96,char_end:114"->"mlc,type='identifier'\nline_star:163,line_end:163|char_star:97,char_end:100";
"nc,type='identifier'\nline_star:163,line_end:163|char_star:102,char_end:104"[shape="point",fillcolor="#121013",style=filled];
"(mlc, nc, opt.cfg),type='tuple'\nline_star:163,line_end:163|char_star:96,char_end:114"->"nc,type='identifier'\nline_star:163,line_end:163|char_star:102,char_end:104";
"opt.cfg,type='attribute'\nline_star:163,line_end:163|char_star:106,char_end:113"[shape="box",fillcolor="white",style=filled];
"(mlc, nc, opt.cfg),type='tuple'\nline_star:163,line_end:163|char_star:96,char_end:114"->"opt.cfg,type='attribute'\nline_star:163,line_end:163|char_star:106,char_end:113";
"opt,type='identifier'\nline_star:163,line_end:163|char_star:106,char_end:109"[shape="point",fillcolor="#121013",style=filled];
"opt.cfg,type='attribute'\nline_star:163,line_end:163|char_star:106,char_end:113"->"opt,type='identifier'\nline_star:163,line_end:163|char_star:106,char_end:109";
"cfg,type='identifier'\nline_star:163,line_end:163|char_star:110,char_end:113"[shape="point",fillcolor="#121013",style=filled];
"opt.cfg,type='attribute'\nline_star:163,line_end:163|char_star:106,char_end:113"->"cfg,type='identifier'\nline_star:163,line_end:163|char_star:110,char_end:113";
"# Dataloader,type='comment'\nline_star:165,line_end:165|char_star:4,char_end:16"[shape="box",fillcolor="#f0c929",style=filled];
"type='INFORMATION BLOCK'\nline_star:60,line_end:360|char_star:4,char_end:18"->"# Dataloader,type='comment'\nline_star:165,line_end:165|char_star:4,char_end:16";
"# number of workers,type='comment'\nline_star:167,line_end:167|char_star:72,char_end:91"[shape="box",fillcolor="#f0c929",style=filled];
"type='INFORMATION BLOCK'\nline_star:60,line_end:360|char_star:4,char_end:18"->"# number of workers,type='comment'\nline_star:167,line_end:167|char_star:72,char_end:91";
"# Testloader,type='comment'\nline_star:175,line_end:175|char_star:4,char_end:16"[shape="box",fillcolor="#f0c929",style=filled];
"type='INFORMATION BLOCK'\nline_star:60,line_end:360|char_star:4,char_end:18"->"# Testloader,type='comment'\nline_star:175,line_end:175|char_star:4,char_end:16";
"# Model parameters,type='comment'\nline_star:186,line_end:186|char_star:4,char_end:22"[shape="box",fillcolor="#f0c929",style=filled];
"type='INFORMATION BLOCK'\nline_star:60,line_end:360|char_star:4,char_end:18"->"# Model parameters,type='comment'\nline_star:186,line_end:186|char_star:4,char_end:22";
"# scale coco-tuned hyp['cls'] to current dataset,type='comment'\nline_star:187,line_end:187|char_star:28,char_end:76"[shape="box",fillcolor="#f0c929",style=filled];
"type='INFORMATION BLOCK'\nline_star:60,line_end:360|char_star:4,char_end:18"->"# scale coco-tuned hyp['cls'] to current dataset,type='comment'\nline_star:187,line_end:187|char_star:28,char_end:76";
"# attach number of classes to model,type='comment'\nline_star:188,line_end:188|char_star:19,char_end:54"[shape="box",fillcolor="#f0c929",style=filled];
"type='INFORMATION BLOCK'\nline_star:60,line_end:360|char_star:4,char_end:18"->"# attach number of classes to model,type='comment'\nline_star:188,line_end:188|char_star:19,char_end:54";
"# attach hyperparameters to model,type='comment'\nline_star:189,line_end:189|char_star:21,char_end:54"[shape="box",fillcolor="#f0c929",style=filled];
"type='INFORMATION BLOCK'\nline_star:60,line_end:360|char_star:4,char_end:18"->"# attach hyperparameters to model,type='comment'\nline_star:189,line_end:189|char_star:21,char_end:54";
"# giou loss ratio (obj_loss = 1.0 or giou),type='comment'\nline_star:190,line_end:190|char_star:20,char_end:62"[shape="box",fillcolor="#f0c929",style=filled];
"type='INFORMATION BLOCK'\nline_star:60,line_end:360|char_star:4,char_end:18"->"# giou loss ratio (obj_loss = 1.0 or giou),type='comment'\nline_star:190,line_end:190|char_star:20,char_end:62";
"# attach class weights,type='comment'\nline_star:191,line_end:191|char_star:82,char_end:104"[shape="box",fillcolor="#f0c929",style=filled];
"type='INFORMATION BLOCK'\nline_star:60,line_end:360|char_star:4,char_end:18"->"# attach class weights,type='comment'\nline_star:191,line_end:191|char_star:82,char_end:104";
"# class frequency,type='comment'\nline_star:194,line_end:194|char_star:4,char_end:21"[shape="box",fillcolor="#f0c929",style=filled];
"type='INFORMATION BLOCK'\nline_star:60,line_end:360|char_star:4,char_end:18"->"# class frequency,type='comment'\nline_star:194,line_end:194|char_star:4,char_end:21";
"# classes,type='comment'\nline_star:196,line_end:196|char_star:36,char_end:45"[shape="box",fillcolor="#f0c929",style=filled];
"type='INFORMATION BLOCK'\nline_star:60,line_end:360|char_star:4,char_end:18"->"# classes,type='comment'\nline_star:196,line_end:196|char_star:36,char_end:45";
"# cf = torch.bincount(c.long(), minlength=nc) + 1.,type='comment'\nline_star:197,line_end:197|char_star:4,char_end:54"[shape="box",fillcolor="#f0c929",style=filled];
"type='INFORMATION BLOCK'\nline_star:60,line_end:360|char_star:4,char_end:18"->"# cf = torch.bincount(c.long(), minlength=nc) + 1.,type='comment'\nline_star:197,line_end:197|char_star:4,char_end:54";
"# model._initialize_biases(cf.to(device)),type='comment'\nline_star:198,line_end:198|char_star:4,char_end:45"[shape="box",fillcolor="#f0c929",style=filled];
"type='INFORMATION BLOCK'\nline_star:60,line_end:360|char_star:4,char_end:18"->"# model._initialize_biases(cf.to(device)),type='comment'\nline_star:198,line_end:198|char_star:4,char_end:45";
"# plot_labels(labels)  #<----------------------------close by xujing,type='comment'\nline_star:199,line_end:199|char_star:4,char_end:72"[shape="box",fillcolor="#f0c929",style=filled];
"type='INFORMATION BLOCK'\nline_star:60,line_end:360|char_star:4,char_end:18"->"# plot_labels(labels)  #<----------------------------close by xujing,type='comment'\nline_star:199,line_end:199|char_star:4,char_end:72";
"# Exponential moving average,type='comment'\nline_star:202,line_end:202|char_star:4,char_end:32"[shape="box",fillcolor="#f0c929",style=filled];
"type='INFORMATION BLOCK'\nline_star:60,line_end:360|char_star:4,char_end:18"->"# Exponential moving average,type='comment'\nline_star:202,line_end:202|char_star:4,char_end:32";
"# Start training,type='comment'\nline_star:205,line_end:205|char_star:4,char_end:20"[shape="box",fillcolor="#f0c929",style=filled];
"type='INFORMATION BLOCK'\nline_star:60,line_end:360|char_star:4,char_end:18"->"# Start training,type='comment'\nline_star:205,line_end:205|char_star:4,char_end:20";
"# number of batches,type='comment'\nline_star:207,line_end:207|char_star:26,char_end:45"[shape="box",fillcolor="#f0c929",style=filled];
"type='INFORMATION BLOCK'\nline_star:60,line_end:360|char_star:4,char_end:18"->"# number of batches,type='comment'\nline_star:207,line_end:207|char_star:26,char_end:45";
"# burn-in iterations, max(3 epochs, 1k iterations),type='comment'\nline_star:208,line_end:208|char_star:31,char_end:81"[shape="box",fillcolor="#f0c929",style=filled];
"type='INFORMATION BLOCK'\nline_star:60,line_end:360|char_star:4,char_end:18"->"# burn-in iterations, max(3 epochs, 1k iterations),type='comment'\nline_star:208,line_end:208|char_star:31,char_end:81";
"# mAP per class,type='comment'\nline_star:209,line_end:209|char_star:25,char_end:40"[shape="box",fillcolor="#f0c929",style=filled];
"type='INFORMATION BLOCK'\nline_star:60,line_end:360|char_star:4,char_end:18"->"# mAP per class,type='comment'\nline_star:209,line_end:209|char_star:25,char_end:40";
"# 'P', 'R', 'mAP', 'F1', 'val GIoU', 'val Objectness', 'val Classification',type='comment'\nline_star:210,line_end:210|char_star:37,char_end:112"[shape="box",fillcolor="#f0c929",style=filled];
"type='INFORMATION BLOCK'\nline_star:60,line_end:360|char_star:4,char_end:18"->"# 'P', 'R', 'mAP', 'F1', 'val GIoU', 'val Objectness', 'val Classification',type='comment'\nline_star:210,line_end:210|char_star:37,char_end:112";
"# torch.autograd.set_detect_anomaly(True),type='comment'\nline_star:214,line_end:214|char_star:4,char_end:45"[shape="box",fillcolor="#f0c929",style=filled];
"type='INFORMATION BLOCK'\nline_star:60,line_end:360|char_star:4,char_end:18"->"# torch.autograd.set_detect_anomaly(True),type='comment'\nline_star:214,line_end:214|char_star:4,char_end:45";
"for epoch in range(start_epoch, epochs):  # epoch ------------------------------------------------------------------\n        model.train()\n\n        # Update image weights (optional)\n        if dataset.image_weights:\n            w = model.class_weights.cpu().numpy() * (1 - maps) ** 2  # class weights\n            image_weights = labels_to_image_weights(dataset.labels, nc=nc, class_weights=w)\n            dataset.indices = random.choices(range(dataset.n), weights=image_weights, k=dataset.n)  # rand weighted idx\n\n        mloss = torch.zeros(4, device=device)  # mean losses\n        print(('\n' + '%10s' * 8) % ('Epoch', 'gpu_mem', 'GIoU', 'obj', 'cls', 'total', 'targets', 'img_size'))\n        pbar = tqdm(enumerate(dataloader), total=nb)  # progress bar\n        for i, (imgs, targets, paths, _) in pbar:  # batch -------------------------------------------------------------\n            ni = i + nb * epoch  # number integrated batches (since train start)\n            imgs = imgs.to(device).float() / 255.0  # uint8 to float32, 0 - 255 to 0.0 - 1.0\n\n            # Burn-in\n            if ni <= n_burn:\n                xi = [0, n_burn]  # x interp\n                # model.gr = np.interp(ni, xi, [0.0, 1.0])  # giou loss ratio (obj_loss = 1.0 or giou)\n                accumulate = max(1, np.interp(ni, xi, [1, nbs / batch_size]).round())\n                for j, x in enumerate(optimizer.param_groups):\n                    # bias lr falls from 0.1 to lr0, all other lrs rise from 0.0 to lr0\n                    x['lr'] = np.interp(ni, xi, [0.1 if j == 2 else 0.0, x['initial_lr'] * lf(epoch)])\n                    if 'momentum' in x:\n                        x['momentum'] = np.interp(ni, xi, [0.9, hyp['momentum']])\n\n            # Multi-scale\n            if opt.multi_scale:\n                sz = random.randrange(imgsz * 0.5, imgsz * 1.5 + gs) // gs * gs  # size\n                sf = sz / max(imgs.shape[2:])  # scale factor\n                if sf != 1:\n                    ns = [math.ceil(x * sf / gs) * gs for x in imgs.shape[2:]]  # new shape (stretched to gs-multiple)\n                    imgs = F.interpolate(imgs, size=ns, mode='bilinear', align_corners=False)\n\n            # Forward\n            pred = model(imgs)\n\n            # Loss\n            loss, loss_items = compute_loss(pred, targets.to(device), model)\n            if not torch.isfinite(loss):\n                print('WARNING: non-finite loss, ending training ', loss_items)\n                return results\n\n            # Backward\n            if mixed_precision:\n                with amp.scale_loss(loss, optimizer) as scaled_loss:\n                    scaled_loss.backward()\n            else:\n                loss.backward()\n\n            # Optimize\n            if ni % accumulate == 0:\n                optimizer.step()\n                optimizer.zero_grad()\n                ema.update(model)\n\n            # Print\n            mloss = (mloss * i + loss_items) / (i + 1)  # update mean losses\n            mem = '%.3gG' % (torch.cuda.memory_cached() / 1E9 if torch.cuda.is_available() else 0)  # (GB)\n            s = ('%10s' * 2 + '%10.4g' * 6) % (\n                '%g/%g' % (epoch, epochs - 1), mem, *mloss, targets.shape[0], imgs.shape[-1])\n            pbar.set_description(s)\n\n            # Plot\n            if ni < 3:\n                f = 'train_batch%g.jpg' % i  # filename\n                res = plot_images(images=imgs, targets=targets, paths=paths, fname=f)\n                if tb_writer:\n                    tb_writer.add_image(f, res, dataformats='HWC', global_step=epoch)\n                    # tb_writer.add_graph(model, imgs)  # add model to tensorboard\n\n            # end batch ------------------------------------------------------------------------------------------------\n\n        # Scheduler\n        scheduler.step()\n\n        # mAP\n        ema.update_attr(model)\n        final_epoch = epoch + 1 == epochs\n        if not opt.notest or final_epoch:  # Calculate mAP\n            results, maps, times = test.test(opt.data,\n                                             batch_size=batch_size,\n                                             imgsz=imgsz_test,\n                                             save_json=final_epoch and opt.data.endswith(os.sep + 'coco.yaml'),\n                                             model=ema.ema,\n                                             single_cls=opt.single_cls,\n                                             dataloader=testloader,\n                                             fast=ni < n_burn)\n\n        # Write\n        with open(results_file, 'a') as f:\n            f.write(s + '%10.4g' * 7 % results + '\n')  # P, R, mAP, F1, test_losses=(GIoU, obj, cls)\n        if len(opt.name) and opt.bucket:\n            os.system('gsutil cp results.txt gs://%s/results/results%s.txt' % (opt.bucket, opt.name))\n\n        # Tensorboard\n        if tb_writer:\n            tags = ['train/giou_loss', 'train/obj_loss', 'train/cls_loss',\n                    'metrics/precision', 'metrics/recall', 'metrics/mAP_0.5', 'metrics/F1',\n                    'val/giou_loss', 'val/obj_loss', 'val/cls_loss']\n            for x, tag in zip(list(mloss[:-1]) + list(results), tags):\n                tb_writer.add_scalar(tag, x, epoch)\n\n        # Update best mAP\n        fi = fitness(np.array(results).reshape(1, -1))  # fitness_i = weighted combination of [P, R, mAP, F1]\n        if fi > best_fitness:\n            best_fitness = fi\n\n        # Save model\n        save = (not opt.nosave) or (final_epoch and not opt.evolve)\n        if save:\n            with open(results_file, 'r') as f:  # create checkpoint\n                ckpt = {'epoch': epoch,\n                        'best_fitness': best_fitness,\n                        'training_results': f.read(),\n                        'model': ema.ema.module if hasattr(model, 'module') else ema.ema,\n                        'optimizer': None if final_epoch else optimizer.state_dict()}\n\n            # Save last, best and delete\n            torch.save(ckpt, last)\n            if (best_fitness == fi) and not final_epoch:\n                torch.save(ckpt, best)\n            del ckpt\n\n        # end epoch ----------------------------------------------------------------------------------------------------,type='for_statement'\nline_star:215,line_end:340|char_star:4,char_end:120"[shape="box",fillcolor="white",style=filled];
"type='INFORMATION BLOCK'\nline_star:60,line_end:360|char_star:4,char_end:18"->"for epoch in range(start_epoch, epochs):  # epoch ------------------------------------------------------------------\n        model.train()\n\n        # Update image weights (optional)\n        if dataset.image_weights:\n            w = model.class_weights.cpu().numpy() * (1 - maps) ** 2  # class weights\n            image_weights = labels_to_image_weights(dataset.labels, nc=nc, class_weights=w)\n            dataset.indices = random.choices(range(dataset.n), weights=image_weights, k=dataset.n)  # rand weighted idx\n\n        mloss = torch.zeros(4, device=device)  # mean losses\n        print(('\n' + '%10s' * 8) % ('Epoch', 'gpu_mem', 'GIoU', 'obj', 'cls', 'total', 'targets', 'img_size'))\n        pbar = tqdm(enumerate(dataloader), total=nb)  # progress bar\n        for i, (imgs, targets, paths, _) in pbar:  # batch -------------------------------------------------------------\n            ni = i + nb * epoch  # number integrated batches (since train start)\n            imgs = imgs.to(device).float() / 255.0  # uint8 to float32, 0 - 255 to 0.0 - 1.0\n\n            # Burn-in\n            if ni <= n_burn:\n                xi = [0, n_burn]  # x interp\n                # model.gr = np.interp(ni, xi, [0.0, 1.0])  # giou loss ratio (obj_loss = 1.0 or giou)\n                accumulate = max(1, np.interp(ni, xi, [1, nbs / batch_size]).round())\n                for j, x in enumerate(optimizer.param_groups):\n                    # bias lr falls from 0.1 to lr0, all other lrs rise from 0.0 to lr0\n                    x['lr'] = np.interp(ni, xi, [0.1 if j == 2 else 0.0, x['initial_lr'] * lf(epoch)])\n                    if 'momentum' in x:\n                        x['momentum'] = np.interp(ni, xi, [0.9, hyp['momentum']])\n\n            # Multi-scale\n            if opt.multi_scale:\n                sz = random.randrange(imgsz * 0.5, imgsz * 1.5 + gs) // gs * gs  # size\n                sf = sz / max(imgs.shape[2:])  # scale factor\n                if sf != 1:\n                    ns = [math.ceil(x * sf / gs) * gs for x in imgs.shape[2:]]  # new shape (stretched to gs-multiple)\n                    imgs = F.interpolate(imgs, size=ns, mode='bilinear', align_corners=False)\n\n            # Forward\n            pred = model(imgs)\n\n            # Loss\n            loss, loss_items = compute_loss(pred, targets.to(device), model)\n            if not torch.isfinite(loss):\n                print('WARNING: non-finite loss, ending training ', loss_items)\n                return results\n\n            # Backward\n            if mixed_precision:\n                with amp.scale_loss(loss, optimizer) as scaled_loss:\n                    scaled_loss.backward()\n            else:\n                loss.backward()\n\n            # Optimize\n            if ni % accumulate == 0:\n                optimizer.step()\n                optimizer.zero_grad()\n                ema.update(model)\n\n            # Print\n            mloss = (mloss * i + loss_items) / (i + 1)  # update mean losses\n            mem = '%.3gG' % (torch.cuda.memory_cached() / 1E9 if torch.cuda.is_available() else 0)  # (GB)\n            s = ('%10s' * 2 + '%10.4g' * 6) % (\n                '%g/%g' % (epoch, epochs - 1), mem, *mloss, targets.shape[0], imgs.shape[-1])\n            pbar.set_description(s)\n\n            # Plot\n            if ni < 3:\n                f = 'train_batch%g.jpg' % i  # filename\n                res = plot_images(images=imgs, targets=targets, paths=paths, fname=f)\n                if tb_writer:\n                    tb_writer.add_image(f, res, dataformats='HWC', global_step=epoch)\n                    # tb_writer.add_graph(model, imgs)  # add model to tensorboard\n\n            # end batch ------------------------------------------------------------------------------------------------\n\n        # Scheduler\n        scheduler.step()\n\n        # mAP\n        ema.update_attr(model)\n        final_epoch = epoch + 1 == epochs\n        if not opt.notest or final_epoch:  # Calculate mAP\n            results, maps, times = test.test(opt.data,\n                                             batch_size=batch_size,\n                                             imgsz=imgsz_test,\n                                             save_json=final_epoch and opt.data.endswith(os.sep + 'coco.yaml'),\n                                             model=ema.ema,\n                                             single_cls=opt.single_cls,\n                                             dataloader=testloader,\n                                             fast=ni < n_burn)\n\n        # Write\n        with open(results_file, 'a') as f:\n            f.write(s + '%10.4g' * 7 % results + '\n')  # P, R, mAP, F1, test_losses=(GIoU, obj, cls)\n        if len(opt.name) and opt.bucket:\n            os.system('gsutil cp results.txt gs://%s/results/results%s.txt' % (opt.bucket, opt.name))\n\n        # Tensorboard\n        if tb_writer:\n            tags = ['train/giou_loss', 'train/obj_loss', 'train/cls_loss',\n                    'metrics/precision', 'metrics/recall', 'metrics/mAP_0.5', 'metrics/F1',\n                    'val/giou_loss', 'val/obj_loss', 'val/cls_loss']\n            for x, tag in zip(list(mloss[:-1]) + list(results), tags):\n                tb_writer.add_scalar(tag, x, epoch)\n\n        # Update best mAP\n        fi = fitness(np.array(results).reshape(1, -1))  # fitness_i = weighted combination of [P, R, mAP, F1]\n        if fi > best_fitness:\n            best_fitness = fi\n\n        # Save model\n        save = (not opt.nosave) or (final_epoch and not opt.evolve)\n        if save:\n            with open(results_file, 'r') as f:  # create checkpoint\n                ckpt = {'epoch': epoch,\n                        'best_fitness': best_fitness,\n                        'training_results': f.read(),\n                        'model': ema.ema.module if hasattr(model, 'module') else ema.ema,\n                        'optimizer': None if final_epoch else optimizer.state_dict()}\n\n            # Save last, best and delete\n            torch.save(ckpt, last)\n            if (best_fitness == fi) and not final_epoch:\n                torch.save(ckpt, best)\n            del ckpt\n\n        # end epoch ----------------------------------------------------------------------------------------------------,type='for_statement'\nline_star:215,line_end:340|char_star:4,char_end:120";
"# end training,type='comment'\nline_star:341,line_end:341|char_star:4,char_end:18"[shape="box",fillcolor="#f0c929",style=filled];
"type='INFORMATION BLOCK'\nline_star:60,line_end:360|char_star:4,char_end:18"->"# end training,type='comment'\nline_star:341,line_end:341|char_star:4,char_end:18";
"if len(n):\n        n = '_' + n if not n.isnumeric() else n\n        fresults, flast, fbest = 'results%s.txt' % n, wdir + 'last%s.pt' % n, wdir + 'best%s.pt' % n\n        for f1, f2 in zip([wdir + 'last.pt', wdir + 'best.pt', 'results.txt'], [flast, fbest, fresults]):\n            if os.path.exists(f1):\n                os.rename(f1, f2)  # rename\n                ispt = f2.endswith('.pt')  # is *.pt\n                strip_optimizer(f2) if ispt else None  # strip optimizer\n                os.system('gsutil cp %s gs://%s/weights' % (f2, opt.bucket)) if opt.bucket and ispt else None,type='if_statement'\nline_star:344,line_end:352|char_star:4,char_end:109"[shape="box",fillcolor="#9ecca4",style=filled];
"type='INFORMATION BLOCK'\nline_star:60,line_end:360|char_star:4,char_end:18"->"if len(n):\n        n = '_' + n if not n.isnumeric() else n\n        fresults, flast, fbest = 'results%s.txt' % n, wdir + 'last%s.pt' % n, wdir + 'best%s.pt' % n\n        for f1, f2 in zip([wdir + 'last.pt', wdir + 'best.pt', 'results.txt'], [flast, fbest, fresults]):\n            if os.path.exists(f1):\n                os.rename(f1, f2)  # rename\n                ispt = f2.endswith('.pt')  # is *.pt\n                strip_optimizer(f2) if ispt else None  # strip optimizer\n                os.system('gsutil cp %s gs://%s/weights' % (f2, opt.bucket)) if opt.bucket and ispt else None,type='if_statement'\nline_star:344,line_end:352|char_star:4,char_end:109";
"# upload,type='comment'\nline_star:352,line_end:352|char_star:111,char_end:119"[shape="box",fillcolor="#f0c929",style=filled];
"type='INFORMATION BLOCK'\nline_star:60,line_end:360|char_star:4,char_end:18"->"# upload,type='comment'\nline_star:352,line_end:352|char_star:111,char_end:119";
"if not opt.evolve:\n        # plot_results()  # save as results.png\n        pass,type='if_statement'\nline_star:354,line_end:356|char_star:4,char_end:12"[shape="box",fillcolor="#9ecca4",style=filled];
"type='INFORMATION BLOCK'\nline_star:60,line_end:360|char_star:4,char_end:18"->"if not opt.evolve:\n        # plot_results()  # save as results.png\n        pass,type='if_statement'\nline_star:354,line_end:356|char_star:4,char_end:12";
"return results,type='return_statement'\nline_star:360,line_end:360|char_star:4,char_end:18"[shape="box",fillcolor="#f0c929",style=filled];
"type='INFORMATION BLOCK'\nline_star:60,line_end:360|char_star:4,char_end:18"->"return results,type='return_statement'\nline_star:360,line_end:360|char_star:4,char_end:18";
"if __name__ == '__main__':\n    parser = argparse.ArgumentParser()\n    parser.add_argument('--epochs', type=int, default=300)\n    parser.add_argument('--batch-size', type=int, default=16)\n    parser.add_argument('--cfg', type=str, default='models/yolov5s.yaml', help='*.cfg path')\n    parser.add_argument('--data', type=str, default='data/coco128.yaml', help='*.data path')\n    parser.add_argument('--img-size', nargs='+', type=int, default=[640, 640], help='train,test sizes')\n    parser.add_argument('--rect', action='store_true', help='rectangular training')\n    parser.add_argument('--resume', action='store_true', help='resume training from last.pt')\n    parser.add_argument('--nosave', action='store_true', help='only save final checkpoint')\n    parser.add_argument('--notest', action='store_true', help='only test final epoch')\n    parser.add_argument('--evolve', action='store_true', help='evolve hyperparameters')\n    parser.add_argument('--bucket', type=str, default='', help='gsutil bucket')\n    parser.add_argument('--cache-images', action='store_true', help='cache images for faster training')\n    parser.add_argument('--weights', type=str, default='', help='initial weights path')\n    parser.add_argument('--name', default='', help='renames results.txt to results_name.txt if supplied')\n    parser.add_argument('--device', default='', help='cuda device, i.e. 0 or 0,1,2,3 or cpu')\n    parser.add_argument('--adam', action='store_true', help='use adam optimizer')\n    parser.add_argument('--multi-scale', action='store_true', help='vary img-size +/- 50%')\n    parser.add_argument('--single-cls', action='store_true', help='train as single-class dataset')\n    opt = parser.parse_args()\n    opt.weights = last if opt.resume else opt.weights\n    opt.cfg = glob.glob('./**/' + opt.cfg, recursive=True)[0]  # find file\n    opt.data = glob.glob('./**/' + opt.data, recursive=True)[0]  # find file\n    print(opt)\n    opt.img_size.extend([opt.img_size[-1]] * (2 - len(opt.img_size)))  # extend to 2 sizes (train, test)\n    device = torch_utils.select_device(opt.device, apex=mixed_precision, batch_size=opt.batch_size)\n    # check_git_status()\n    if device.type == 'cpu':\n        mixed_precision = False\n\n    # Train\n    if not opt.evolve:\n        tb_writer = SummaryWriter(comment=opt.name)\n        print('Start Tensorboard with 'tensorboard --logdir=runs', view at http://localhost:6006/')\n        train(hyp)\n\n    # Evolve hyperparameters (optional)\n    else:\n        tb_writer = None\n        opt.notest, opt.nosave = True, True  # only test/save final epoch\n        if opt.bucket:\n            os.system('gsutil cp gs://%s/evolve.txt .' % opt.bucket)  # download evolve.txt if exists\n\n        for _ in range(10):  # generations to evolve\n            if os.path.exists('evolve.txt'):  # if evolve.txt exists: select best hyps and mutate\n                # Select parent(s)\n                parent = 'single'  # parent selection method: 'single' or 'weighted'\n                x = np.loadtxt('evolve.txt', ndmin=2)\n                n = min(5, len(x))  # number of previous results to consider\n                x = x[np.argsort(-fitness(x))][:n]  # top n mutations\n                w = fitness(x) - fitness(x).min()  # weights\n                if parent == 'single' or len(x) == 1:\n                    # x = x[random.randint(0, n - 1)]  # random selection\n                    x = x[random.choices(range(n), weights=w)[0]]  # weighted selection\n                elif parent == 'weighted':\n                    x = (x * w.reshape(n, 1)).sum(0) / w.sum()  # weighted combination\n\n                # Mutate\n                mp, s = 0.9, 0.2  # mutation probability, sigma\n                npr = np.random\n                npr.seed(int(time.time()))\n                g = np.array([1, 1, 1, 1, 1, 1, 1, 0, .1, 1, 0, 1, 1, 1, 1, 1, 1, 1])  # gains\n                ng = len(g)\n                v = np.ones(ng)\n                while all(v == 1):  # mutate until a change occurs (prevent duplicates)\n                    v = (g * (npr.random(ng) < mp) * npr.randn(ng) * npr.random() * s + 1).clip(0.3, 3.0)\n                for i, k in enumerate(hyp.keys()):  # plt.hist(v.ravel(), 300)\n                    hyp[k] = x[i + 7] * v[i]  # mutate\n\n            # Clip to limits\n            keys = ['lr0', 'iou_t', 'momentum', 'weight_decay', 'hsv_s', 'hsv_v', 'translate', 'scale', 'fl_gamma']\n            limits = [(1e-5, 1e-2), (0.00, 0.70), (0.60, 0.98), (0, 0.001), (0, .9), (0, .9), (0, .9), (0, .9), (0, 3)]\n            for k, v in zip(keys, limits):\n                hyp[k] = np.clip(hyp[k], v[0], v[1])\n\n            # Train mutation\n            results = train(hyp.copy())\n\n            # Write mutation results\n            print_mutation(hyp, results, opt.bucket)\n\n            # Plot results\n            # plot_evolution_results(hyp),type='if_statement'\nline_star:363,line_end:446|char_star:0,char_end:41"[shape="box",fillcolor="#9ecca4",style=filled];
"MODULE"->"if __name__ == '__main__':\n    parser = argparse.ArgumentParser()\n    parser.add_argument('--epochs', type=int, default=300)\n    parser.add_argument('--batch-size', type=int, default=16)\n    parser.add_argument('--cfg', type=str, default='models/yolov5s.yaml', help='*.cfg path')\n    parser.add_argument('--data', type=str, default='data/coco128.yaml', help='*.data path')\n    parser.add_argument('--img-size', nargs='+', type=int, default=[640, 640], help='train,test sizes')\n    parser.add_argument('--rect', action='store_true', help='rectangular training')\n    parser.add_argument('--resume', action='store_true', help='resume training from last.pt')\n    parser.add_argument('--nosave', action='store_true', help='only save final checkpoint')\n    parser.add_argument('--notest', action='store_true', help='only test final epoch')\n    parser.add_argument('--evolve', action='store_true', help='evolve hyperparameters')\n    parser.add_argument('--bucket', type=str, default='', help='gsutil bucket')\n    parser.add_argument('--cache-images', action='store_true', help='cache images for faster training')\n    parser.add_argument('--weights', type=str, default='', help='initial weights path')\n    parser.add_argument('--name', default='', help='renames results.txt to results_name.txt if supplied')\n    parser.add_argument('--device', default='', help='cuda device, i.e. 0 or 0,1,2,3 or cpu')\n    parser.add_argument('--adam', action='store_true', help='use adam optimizer')\n    parser.add_argument('--multi-scale', action='store_true', help='vary img-size +/- 50%')\n    parser.add_argument('--single-cls', action='store_true', help='train as single-class dataset')\n    opt = parser.parse_args()\n    opt.weights = last if opt.resume else opt.weights\n    opt.cfg = glob.glob('./**/' + opt.cfg, recursive=True)[0]  # find file\n    opt.data = glob.glob('./**/' + opt.data, recursive=True)[0]  # find file\n    print(opt)\n    opt.img_size.extend([opt.img_size[-1]] * (2 - len(opt.img_size)))  # extend to 2 sizes (train, test)\n    device = torch_utils.select_device(opt.device, apex=mixed_precision, batch_size=opt.batch_size)\n    # check_git_status()\n    if device.type == 'cpu':\n        mixed_precision = False\n\n    # Train\n    if not opt.evolve:\n        tb_writer = SummaryWriter(comment=opt.name)\n        print('Start Tensorboard with 'tensorboard --logdir=runs', view at http://localhost:6006/')\n        train(hyp)\n\n    # Evolve hyperparameters (optional)\n    else:\n        tb_writer = None\n        opt.notest, opt.nosave = True, True  # only test/save final epoch\n        if opt.bucket:\n            os.system('gsutil cp gs://%s/evolve.txt .' % opt.bucket)  # download evolve.txt if exists\n\n        for _ in range(10):  # generations to evolve\n            if os.path.exists('evolve.txt'):  # if evolve.txt exists: select best hyps and mutate\n                # Select parent(s)\n                parent = 'single'  # parent selection method: 'single' or 'weighted'\n                x = np.loadtxt('evolve.txt', ndmin=2)\n                n = min(5, len(x))  # number of previous results to consider\n                x = x[np.argsort(-fitness(x))][:n]  # top n mutations\n                w = fitness(x) - fitness(x).min()  # weights\n                if parent == 'single' or len(x) == 1:\n                    # x = x[random.randint(0, n - 1)]  # random selection\n                    x = x[random.choices(range(n), weights=w)[0]]  # weighted selection\n                elif parent == 'weighted':\n                    x = (x * w.reshape(n, 1)).sum(0) / w.sum()  # weighted combination\n\n                # Mutate\n                mp, s = 0.9, 0.2  # mutation probability, sigma\n                npr = np.random\n                npr.seed(int(time.time()))\n                g = np.array([1, 1, 1, 1, 1, 1, 1, 0, .1, 1, 0, 1, 1, 1, 1, 1, 1, 1])  # gains\n                ng = len(g)\n                v = np.ones(ng)\n                while all(v == 1):  # mutate until a change occurs (prevent duplicates)\n                    v = (g * (npr.random(ng) < mp) * npr.randn(ng) * npr.random() * s + 1).clip(0.3, 3.0)\n                for i, k in enumerate(hyp.keys()):  # plt.hist(v.ravel(), 300)\n                    hyp[k] = x[i + 7] * v[i]  # mutate\n\n            # Clip to limits\n            keys = ['lr0', 'iou_t', 'momentum', 'weight_decay', 'hsv_s', 'hsv_v', 'translate', 'scale', 'fl_gamma']\n            limits = [(1e-5, 1e-2), (0.00, 0.70), (0.60, 0.98), (0, 0.001), (0, .9), (0, .9), (0, .9), (0, .9), (0, 3)]\n            for k, v in zip(keys, limits):\n                hyp[k] = np.clip(hyp[k], v[0], v[1])\n\n            # Train mutation\n            results = train(hyp.copy())\n\n            # Write mutation results\n            print_mutation(hyp, results, opt.bucket)\n\n            # Plot results\n            # plot_evolution_results(hyp),type='if_statement'\nline_star:363,line_end:446|char_star:0,char_end:41";
"import argparse\nimport torch.distributed as dist\nimport torch.nn.functional as F\nimport torch.optim as optim\nimport torch.optim.lr_scheduler as lr_scheduler\nimport yaml\nfrom torch.utils.tensorboard import SummaryWriter\nimport test\nfrom models.yolo import Model\nfrom utils.datasets import *\nfrom utils.utils import *\nfrom apex import am"[shape="box",fillcolor="#f48b29",style=filled];
"MODULE"->"import argparse\nimport torch.distributed as dist\nimport torch.nn.functional as F\nimport torch.optim as optim\nimport torch.optim.lr_scheduler as lr_scheduler\nimport yaml\nfrom torch.utils.tensorboard import SummaryWriter\nimport test\nfrom models.yolo import Model\nfrom utils.datasets import *\nfrom utils.utils import *\nfrom apex import am"
}
